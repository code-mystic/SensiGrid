!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("SensiGrid",[],t):"object"==typeof exports?exports.SensiGrid=t():e.SensiGrid=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(2),o=(r=s)&&r.__esModule?r:{default:r};var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),i(t,[{key:"addEventListener",value:function(e,t){this.on(e,function(){var e=arguments;t.apply(this,e)})}}]),t}();t.default=a,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={instances:[],defaults:{table_config:{width:600,height:400,data:[]}}},e.exports=t.default},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i={emitDelay:10,strictMode:!1},s=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?i:arguments[0];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=void 0,r=void 0;n=t.hasOwnProperty("emitDelay")?t.emitDelay:i.emitDelay,this._emitDelay=n,r=t.hasOwnProperty("strictMode")?t.strictMode:i.strictMode,this._strictMode=r,this._listeners={},this.events=[]}return r(e,[{key:"_addListenner",value:function(e,t,n){if("function"!=typeof t)throw TypeError("listener must be a function");-1===this.events.indexOf(e)?(this._listeners[e]=[{once:n,fn:t}],this.events.push(e)):this._listeners[e].push({once:n,fn:t})}},{key:"on",value:function(e,t){this._addListenner(e,t,!1)}},{key:"once",value:function(e,t){this._addListenner(e,t,!0)}},{key:"off",value:function(e,t){var n,r,i=this,s=this.events.indexOf(e);e&&-1!==s&&(t?(n=[],(r=i._listeners[e]).forEach(function(e,r){e.fn===t&&n.unshift(r)}),n.forEach(function(e){r.splice(e,1)}),r.length||(i.events.splice(s,1),delete i._listeners[e])):(delete this._listeners[e],this.events.splice(s,1)))}},{key:"_applyEvents",value:function(e,t){var n=this._listeners[e];if(n&&n.length){var r=[];n.forEach(function(e,n){e.fn.apply(null,t),e.once&&r.unshift(n)}),r.forEach(function(e){n.splice(e,1)})}else if(this._strictMode)throw"No listeners specified for event: "+e}},{key:"emit",value:function(e){for(var t=this,n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];this._emitDelay?setTimeout(function(){t._applyEvents.call(t,e,r)},this._emitDelay):this._applyEvents(e,r)}},{key:"emitSync",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this._applyEvents(e,n)}},{key:"destroy",value:function(){this._listeners={},this.events=[]}}]),e}();e.exports=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkURLPattern=function(e){var t=!1,n=0;if(e.startsWith("http://")||e.startsWith("https://")?n+=40:e.startsWith("./")||e.startsWith("../")||e.startsWith("/")?n+=40:e.startsWith("www")&&(n+=40),0!==e.indexOf(".")){var r=e.split("."),i=r[r.length-1];n+=5,["js","json","csv"].forEach(function(e){i===e&&(n+=35)})}return n>=40&&(t=!0),t}},function(e,t,n){var r,i,s;
/*!
	Papa Parse
	v4.3.7
	https://github.com/mholt/PapaParse
	License: MIT
*/i=[],void 0===(s="function"==typeof(r=function(){"use strict";var e,t,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,i=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),s=!1,o={},a=0,u={parse:function(t,r){var i=(r=r||{}).dynamicTyping||!1;if(k(i)&&(r.dynamicTypingFunction=i,i={}),r.dynamicTyping=i,r.worker&&u.WORKERS_SUPPORTED){var f=function(){if(!u.WORKERS_SUPPORTED)return!1;if(!s&&null===u.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=u.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(t);return r.onmessage=v,r.id=a++,o[r.id]=r,r}();return f.userStep=r.step,f.userChunk=r.chunk,f.userComplete=r.complete,f.userError=r.error,r.step=k(r.step),r.chunk=k(r.chunk),r.complete=k(r.complete),r.error=k(r.error),delete r.worker,void f.postMessage({input:t,config:r,workerId:f.id})}var h=null;return"string"==typeof t?h=r.download?new c(r):new d(r):!0===t.readable&&k(t.read)&&k(t.on)?h=new p(r):(n.File&&t instanceof File||t instanceof Object)&&(h=new l(r)),h.stream(t)},unparse:function(e,t){var n=!1,r=!0,i=",",s="\r\n",o='"';"object"==typeof t&&("string"==typeof t.delimiter&&1===t.delimiter.length&&-1===u.BAD_DELIMITERS.indexOf(t.delimiter)&&(i=t.delimiter),("boolean"==typeof t.quotes||t.quotes instanceof Array)&&(n=t.quotes),"string"==typeof t.newline&&(s=t.newline),"string"==typeof t.quoteChar&&(o=t.quoteChar),"boolean"==typeof t.header&&(r=t.header));var a=new RegExp(o,"g");if("string"==typeof e&&(e=JSON.parse(e)),e instanceof Array){if(!e.length||e[0]instanceof Array)return h(null,e);if("object"==typeof e[0])return h(f(e[0]),e)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),e.data instanceof Array&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=e.data[0]instanceof Array?e.fields:f(e.data[0])),e.data[0]instanceof Array||"object"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[]);throw"exception: Unable to serialize unrecognized input";function f(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function h(e,t){var n="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var o=e instanceof Array&&e.length>0,a=!(t[0]instanceof Array);if(o&&r){for(var u=0;u<e.length;u++)u>0&&(n+=i),n+=c(e[u],u);t.length>0&&(n+=s)}for(var f=0;f<t.length;f++){for(var h=o?e.length:t[f].length,l=0;l<h;l++){l>0&&(n+=i);var d=o&&a?e[l]:l;n+=c(t[f][d],l)}f<t.length-1&&(n+=s)}return n}function c(e,t){if(void 0===e||null===e)return"";e=e.toString().replace(a,o+o);var r="boolean"==typeof n&&n||n instanceof Array&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(e.indexOf(t[n])>-1)return!0;return!1}(e,u.BAD_DELIMITERS)||e.indexOf(i)>-1||" "===e.charAt(0)||" "===e.charAt(e.length-1);return r?o+e+o:e}}};if(u.RECORD_SEP=String.fromCharCode(30),u.UNIT_SEP=String.fromCharCode(31),u.BYTE_ORDER_MARK="\ufeff",u.BAD_DELIMITERS=["\r","\n",'"',u.BYTE_ORDER_MARK],u.WORKERS_SUPPORTED=!r&&!!n.Worker,u.SCRIPT_PATH=null,u.LocalChunkSize=10485760,u.RemoteChunkSize=5242880,u.DefaultDelimiter=",",u.Parser=g,u.ParserHandle=_,u.NetworkStreamer=c,u.FileStreamer=l,u.StringStreamer=d,u.ReadableStreamStreamer=p,n.jQuery){var f=n.jQuery;f.fn.parse=function(e){var t=e.config||{},r=[];return this.each(function(e){var i="INPUT"===f(this).prop("tagName").toUpperCase()&&"file"===f(this).attr("type").toLowerCase()&&n.FileReader;if(!i||!this.files||0===this.files.length)return!0;for(var s=0;s<this.files.length;s++)r.push({file:this.files[s],inputElem:this,instanceConfig:f.extend({},t)})}),i(),this;function i(){if(0!==r.length){var t,n,i,o,a=r[0];if(k(e.before)){var h=e.before(a.file,a.inputElem);if("object"==typeof h){if("abort"===h.action)return t="AbortError",n=a.file,i=a.inputElem,o=h.reason,void(k(e.error)&&e.error({name:t},n,i,o));if("skip"===h.action)return void s();"object"==typeof h.config&&(a.instanceConfig=f.extend(a.instanceConfig,h.config))}else if("skip"===h)return void s()}var c=a.instanceConfig.complete;a.instanceConfig.complete=function(e){k(c)&&c(e,a.file,a.inputElem),s()},u.parse(a.file,a.instanceConfig)}else k(e.complete)&&e.complete()}function s(){r.splice(0,1),i()}}}function h(e){this._handle=null,this._paused=!1,this._finished=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=b(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new _(t),this._handle.streamer=this,this._config=t}.call(this,e),this.parseChunk=function(e){if(this.isFirstChunk&&k(this._config.beforeFirstChunk)){var t=this._config.beforeFirstChunk(e);void 0!==t&&(e=t)}this.isFirstChunk=!1;var r=this._partialLine+e;this._partialLine="";var s=this._handle.parse(r,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var o=s.meta.cursor;this._finished||(this._partialLine=r.substring(o-this._baseIndex),this._baseIndex=o),s&&s.data&&(this._rowCount+=s.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)n.postMessage({results:s,workerId:u.WORKER_ID,finished:a});else if(k(this._config.chunk)){if(this._config.chunk(s,this._handle),this._paused)return;s=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(s.data),this._completeResults.errors=this._completeResults.errors.concat(s.errors),this._completeResults.meta=s.meta),!a||!k(this._config.complete)||s&&s.meta.aborted||this._config.complete(this._completeResults,this._input),a||s&&s.meta.paused||this._nextChunk(),s}},this._sendError=function(e){k(this._config.error)?this._config.error(e):i&&this._config.error&&n.postMessage({workerId:u.WORKER_ID,error:e,finished:!1})}}function c(e){var t;(e=e||{}).chunkSize||(e.chunkSize=u.RemoteChunkSize),h.call(this,e),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),r||(t.onload=w(this._chunkLoaded,this),t.onerror=w(this._chunkError,this)),t.open("GET",this._input,!r),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+i),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}r&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){4==t.readyState&&(t.status<200||t.status>=400?this._chunkError():(this._finished=!this._config.chunkSize||this._start>function(e){var t=e.getResponseHeader("Content-Range");return null===t?-1:parseInt(t.substr(t.lastIndexOf("/")+1))}(t),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(n)}}function l(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=u.LocalChunkSize),h.call(this,e);var r="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,r?((t=new FileReader).onload=w(this._chunkLoaded,this),t.onerror=w(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,i)}var s=t.readAsText(e,this._config.encoding);r||this._chunkLoaded({target:{result:s}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error.message)}}function d(e){var t;e=e||{},h.call(this,e),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function p(e){e=e||{},h.call(this,e);var t=[],n=!0;this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._nextChunk=function(){t.length?this.parseChunk(t.shift()):n=!0},this._streamData=w(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=w(function(e){this._streamCleanUp(),this._sendError(e.message)},this),this._streamEnd=w(function(){this._streamCleanUp(),this._finished=!0,this._streamData("")},this),this._streamCleanUp=w(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function _(e){var t,n,r,i=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,s=this,o=0,a=!1,f=!1,h=[],c={data:[],errors:[],meta:{}};if(k(e.step)){var l=e.step;e.step=function(t){if(c=t,p())d();else{if(d(),0===c.data.length)return;o+=t.data.length,e.preview&&o>e.preview?n.abort():l(c,s)}}}function d(){if(c&&r&&(v("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+u.DefaultDelimiter+"'"),r=!1),e.skipEmptyLines)for(var t=0;t<c.data.length;t++)1===c.data[t].length&&""===c.data[t][0]&&c.data.splice(t--,1);return p()&&function(){if(c){for(var e=0;p()&&e<c.data.length;e++)for(var t=0;t<c.data[e].length;t++)h.push(c.data[e][t]);c.data.splice(0,1)}}(),function(){if(!c||!e.header&&!e.dynamicTyping)return c;for(var t=0;t<c.data.length;t++){for(var n=e.header?{}:[],r=0;r<c.data[t].length;r++){var i=r,s=c.data[t][r];e.header&&(i=r>=h.length?"__parsed_extra":h[r]),s=_(i,s),"__parsed_extra"===i?(n[i]=n[i]||[],n[i].push(s)):n[i]=s}c.data[t]=n,e.header&&(r>h.length?v("FieldMismatch","TooManyFields","Too many fields: expected "+h.length+" fields but parsed "+r,t):r<h.length&&v("FieldMismatch","TooFewFields","Too few fields: expected "+h.length+" fields but parsed "+r,t))}return e.header&&c.meta&&(c.meta.fields=h),c}()}function p(){return e.header&&0===h.length}function _(t,n){return function(t){return e.dynamicTypingFunction&&void 0===e.dynamicTyping[t]&&(e.dynamicTyping[t]=e.dynamicTypingFunction(t)),!0===(e.dynamicTyping[t]||e.dynamicTyping)}(t)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(r=n,i.test(r)?parseFloat(r):r):n;var r}function v(e,t,n,r){c.errors.push({type:e,code:t,message:n,row:r})}this.parse=function(i,s,o){if(e.newline||(e.newline=function(e){var t=(e=e.substr(0,1048576)).split("\r"),n=e.split("\n"),r=n.length>1&&n[0].length<t[0].length;if(1===t.length||r)return"\n";for(var i=0,s=0;s<t.length;s++)"\n"===t[s][0]&&i++;return i>=t.length/2?"\r\n":"\r"}(i)),r=!1,e.delimiter)k(e.delimiter)&&(e.delimiter=e.delimiter(i),c.meta.delimiter=e.delimiter);else{var f=function(t,n,r){for(var i,s,o,a=[",","\t","|",";",u.RECORD_SEP,u.UNIT_SEP],f=0;f<a.length;f++){var h=a[f],c=0,l=0,d=0;o=void 0;for(var p=new g({delimiter:h,newline:n,preview:10}).parse(t),_=0;_<p.data.length;_++)if(r&&1===p.data[_].length&&0===p.data[_][0].length)d++;else{var v=p.data[_].length;l+=v,void 0!==o?v>1&&(c+=Math.abs(v-o),o=v):o=v}p.data.length>0&&(l/=p.data.length-d),(void 0===s||c<s)&&l>1.99&&(s=c,i=h)}return e.delimiter=i,{successful:!!i,bestDelimiter:i}}(i,e.newline,e.skipEmptyLines);f.successful?e.delimiter=f.bestDelimiter:(r=!0,e.delimiter=u.DefaultDelimiter),c.meta.delimiter=e.delimiter}var h=b(e);return e.preview&&e.header&&h.preview++,t=i,n=new g(h),c=n.parse(t,s,o),d(),a?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return a},this.pause=function(){a=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){a=!1,s.streamer.parseChunk(t)},this.aborted=function(){return f},this.abort=function(){f=!0,n.abort(),c.meta.aborted=!0,k(e.complete)&&e.complete(c),t=""}}function g(e){var t=(e=e||{}).delimiter,n=e.newline,r=e.comments,i=e.step,s=e.preview,o=e.fastMode;if(void 0===e.quoteChar)var a='"';else var a=e.quoteChar;if(("string"!=typeof t||u.BAD_DELIMITERS.indexOf(t)>-1)&&(t=","),r===t)throw"Comment character same as delimiter";!0===r?r="#":("string"!=typeof r||u.BAD_DELIMITERS.indexOf(r)>-1)&&(r=!1),"\n"!=n&&"\r"!=n&&"\r\n"!=n&&(n="\n");var f=0,h=!1;this.parse=function(e,u,c){if("string"!=typeof e)throw"Input must be a string";var l=e.length,d=t.length,p=n.length,_=r.length,g=k(i);f=0;var v=[],m=[],y=[],b=0;if(!e)return I();if(o||!1!==o&&-1===e.indexOf(a)){for(var w=e.split(n),E=0;E<w.length;E++){var y=w[E];if(f+=y.length,E!==w.length-1)f+=n.length;else if(c)return I();if(!r||y.substr(0,_)!==r){if(g){if(v=[],D(y.split(t)),j(),h)return I()}else D(y.split(t));if(s&&E>=s)return v=v.slice(0,s),I(!0)}}return I()}for(var O=e.indexOf(t,f),R=e.indexOf(n,f),C=new RegExp(a+a,"g");;)if(e[f]!==a)if(r&&0===y.length&&e.substr(f,_)===r){if(-1===R)return I();f=R+p,R=e.indexOf(n,f),O=e.indexOf(t,f)}else if(-1!==O&&(O<R||-1===R))y.push(e.substring(f,O)),f=O+d,O=e.indexOf(t,f);else{if(-1===R)break;if(y.push(e.substring(f,R)),P(R+p),g&&(j(),h))return I();if(s&&v.length>=s)return I(!0)}else{var S=f;for(f++;;){var S=e.indexOf(a,S+1);if(-1===S)return c||m.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:v.length,index:f}),T();if(S===l-1){var x=e.substring(f,S).replace(C,a);return T(x)}if(e[S+1]!==a){if(e[S+1]===t){y.push(e.substring(f,S).replace(C,a)),f=S+1+d,O=e.indexOf(t,f),R=e.indexOf(n,f);break}if(e.substr(S+1,p)===n){if(y.push(e.substring(f,S).replace(C,a)),P(S+1+p),O=e.indexOf(t,f),g&&(j(),h))return I();if(s&&v.length>=s)return I(!0);break}m.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:v.length,index:f}),S++}else S++}}return T();function D(e){v.push(e),b=f}function T(t){return c?I():(void 0===t&&(t=e.substr(f)),y.push(t),f=l,D(y),g&&j(),I())}function P(t){f=t,D(y),y=[],R=e.indexOf(n,f)}function I(e){return{data:v,errors:m,meta:{delimiter:t,linebreak:n,aborted:h,truncated:!!e,cursor:b+(u||0)}}}function j(){i(I()),v=[],m=[]}},this.abort=function(){h=!0},this.getCharIndex=function(){return f}}function v(e){var t=e.data,n=o[t.workerId],r=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var i={abort:function(){r=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(k(n.userStep)){for(var s=0;s<t.results.data.length&&(n.userStep({data:[t.results.data[s]],errors:t.results.errors,meta:t.results.meta},i),!r);s++);delete t.results}else k(n.userChunk)&&(n.userChunk(t.results,i,t.file),delete t.results)}t.finished&&!r&&m(t.workerId,t.results)}function m(e,t){var n=o[e];k(n.userComplete)&&n.userComplete(t),n.terminate(),delete o[e]}function y(){throw"Not implemented."}function b(e){if("object"!=typeof e)return e;var t=e instanceof Array?[]:{};for(var n in e)t[n]=b(e[n]);return t}function w(e,t){return function(){e.apply(t,arguments)}}function k(e){return"function"==typeof e}return i?n.onmessage=function(e){var t=e.data;if(void 0===u.WORKER_ID&&t&&(u.WORKER_ID=t.workerId),"string"==typeof t.input)n.postMessage({workerId:u.WORKER_ID,results:u.parse(t.input,t.config),finished:!0});else if(n.File&&t.input instanceof File||t.input instanceof Object){var r=u.parse(t.input,t.config);r&&n.postMessage({workerId:u.WORKER_ID,results:r,finished:!0})}}:u.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){s=!0},!0):s=!0),c.prototype=Object.create(h.prototype),c.prototype.constructor=c,l.prototype=Object.create(h.prototype),l.prototype.constructor=l,d.prototype=Object.create(d.prototype),d.prototype.constructor=d,p.prototype=Object.create(h.prototype),p.prototype.constructor=p,u})?r.apply(t,i):r)||(e.exports=s)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=a(n(4)),s=n(3),o=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return n.data_config={},e&&(n.data_config.rawData=e,"URL"===function(e){return(0,s.checkURLPattern)(e)?"URL":"String"}(e)?n.data_config.rawDataIsURL=!0:n.data_config.rawDataIsURL=!1,n.parseCSVtoJSON()),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),r(t,[{key:"parseCSVtoJSON",value:function(){var e=this,t=this.data_config,n=t&&t.rawData,r=t&&t.rawDataIsURL,s=void 0;i.default.parse(n,{download:r,complete:function(t){s=t,console.log(s),e.emit("dataParsed",s)},error:function(e,t){console.log("ERROR: Error in loading the file : "+t)}})}}]),t}();t.default=u,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(5)),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),s=o(n(0));function o(e){return e&&e.__esModule?e:{default:e}}t.default=function e(t,n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=i.defaults.table_config;i.instances;this.width=a.width=t||a.width,this.height=a.height=n||a.height,this.gridEvent=new s.default,void 0!==o&&new r.default(o).addEventListener("dataParsed",function(e){console.log("EVENT FIRED AND LISTENED"),console.log(e),a.data=e.data,createTable()})},e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TZW5zaUdyaWQvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1NlbnNpR3JpZC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9TZW5zaUdyaWQvLi9zcmMvZXZlbnRzL2V2ZW50LmpzIiwid2VicGFjazovL1NlbnNpR3JpZC8uL3NyYy9tb2RlbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vU2Vuc2lHcmlkLy4vbm9kZV9tb2R1bGVzL2V2ZW50LWVtaXR0ZXItZXM2L2luZGV4LmpzIiwid2VicGFjazovL1NlbnNpR3JpZC8uL3NyYy91dGlsaXRpZXMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9TZW5zaUdyaWQvLi9ub2RlX21vZHVsZXMvcGFwYXBhcnNlL3BhcGFwYXJzZS5qcyIsIndlYnBhY2s6Ly9TZW5zaUdyaWQvLi9zcmMvdXRpbGl0aWVzL0NTVlByb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly9TZW5zaUdyaWQvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2V2ZW50RW1pdHRlckVzIiwiQ3VzdG9tRXZlbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsInR5cGUiLCJjYWxsYmFjayIsIm9uIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiaW5zdGFuY2VzIiwiZGVmYXVsdHMiLCJ0YWJsZV9jb25maWciLCJ3aWR0aCIsImhlaWdodCIsImRhdGEiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwid3JpdGFibGUiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIkRFRkFVTFRfVkFMVUVTIiwiZW1pdERlbGF5Iiwic3RyaWN0TW9kZSIsIkV2ZW50RW1pdHRlciIsIm9wdHMiLCJ1bmRlZmluZWQiLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIl9lbWl0RGVsYXkiLCJfc3RyaWN0TW9kZSIsIl9saXN0ZW5lcnMiLCJldmVudHMiLCJsaXN0ZW5lciIsIm9uY2UiLCJpbmRleE9mIiwiZm4iLCJwdXNoIiwiX2FkZExpc3Rlbm5lciIsImV2ZW50VHlwZSIsImxpc3RlbmVyRnVuYyIsInJlbW92ZWRFdmVudHMiLCJ0eXBlTGlzdGVuZXJzIiwiX3RoaXMiLCJ0eXBlSW5kZXgiLCJmb3JFYWNoIiwiaWR4IiwidW5zaGlmdCIsInNwbGljZSIsImV2ZW50QXJndW1lbnRzIiwicmVtb3ZhYmxlTGlzdGVuZXJzIiwiZWVMaXN0ZW5lciIsIl90aGlzMiIsIl9sZW4iLCJldmVudEFyZ3MiLCJBcnJheSIsIl9rZXkiLCJzZXRUaW1lb3V0IiwiX2FwcGx5RXZlbnRzIiwiX2xlbjIiLCJfa2V5MiIsImNoZWNrVVJMUGF0dGVybiIsInN0ciIsImlzVVJMIiwiY29uZmlkZW5jZSIsInN0YXJ0c1dpdGgiLCJhcnIiLCJzcGxpdCIsInByb2JhYmxlRm9ybWF0IiwiZWxlbSIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIkFVVE9fU0NSSVBUX1BBVEgiLCJzY3JpcHRzIiwiZ2xvYmFsIiwic2VsZiIsIklTX1dPUktFUiIsImRvY3VtZW50IiwicG9zdE1lc3NhZ2UiLCJJU19QQVBBX1dPUktFUiIsInRlc3QiLCJsb2NhdGlvbiIsInNlYXJjaCIsIkxPQURFRF9TWU5DIiwid29ya2VycyIsIndvcmtlcklkQ291bnRlciIsIlBhcGEiLCJwYXJzZSIsIl9pbnB1dCIsIl9jb25maWciLCJkeW5hbWljVHlwaW5nIiwiaXNGdW5jdGlvbiIsImR5bmFtaWNUeXBpbmdGdW5jdGlvbiIsIndvcmtlciIsIldPUktFUlNfU1VQUE9SVEVEIiwidyIsIlNDUklQVF9QQVRIIiwiRXJyb3IiLCJ3b3JrZXJVcmwiLCJXb3JrZXIiLCJvbm1lc3NhZ2UiLCJtYWluVGhyZWFkUmVjZWl2ZWRNZXNzYWdlIiwiaWQiLCJuZXdXb3JrZXIiLCJ1c2VyU3RlcCIsInN0ZXAiLCJ1c2VyQ2h1bmsiLCJjaHVuayIsInVzZXJDb21wbGV0ZSIsImNvbXBsZXRlIiwidXNlckVycm9yIiwiZXJyb3IiLCJpbnB1dCIsImNvbmZpZyIsIndvcmtlcklkIiwic3RyZWFtZXIiLCJkb3dubG9hZCIsIk5ldHdvcmtTdHJlYW1lciIsIlN0cmluZ1N0cmVhbWVyIiwicmVhZGFibGUiLCJyZWFkIiwiUmVhZGFibGVTdHJlYW1TdHJlYW1lciIsIkZpbGUiLCJGaWxlU3RyZWFtZXIiLCJzdHJlYW0iLCJ1bnBhcnNlIiwiX3F1b3RlcyIsIl93cml0ZUhlYWRlciIsIl9kZWxpbWl0ZXIiLCJfbmV3bGluZSIsIl9xdW90ZUNoYXIiLCJkZWxpbWl0ZXIiLCJCQURfREVMSU1JVEVSUyIsInF1b3RlcyIsIm5ld2xpbmUiLCJxdW90ZUNoYXIiLCJoZWFkZXIiLCJxdW90ZUNoYXJSZWdleCIsIlJlZ0V4cCIsIkpTT04iLCJzZXJpYWxpemUiLCJvYmplY3RLZXlzIiwiZmllbGRzIiwibWV0YSIsIm9iaiIsImtleXMiLCJjc3YiLCJoYXNIZWFkZXIiLCJkYXRhS2V5ZWRCeUZpZWxkIiwic2FmZSIsInJvdyIsIm1heENvbCIsImNvbCIsImNvbElkeCIsInRvU3RyaW5nIiwicmVwbGFjZSIsIm5lZWRzUXVvdGVzIiwic3Vic3RyaW5ncyIsImhhc0FueSIsImNoYXJBdCIsIlJFQ09SRF9TRVAiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJVTklUX1NFUCIsIkJZVEVfT1JERVJfTUFSSyIsIkxvY2FsQ2h1bmtTaXplIiwiUmVtb3RlQ2h1bmtTaXplIiwiRGVmYXVsdERlbGltaXRlciIsIlBhcnNlciIsIlBhcnNlckhhbmRsZSIsImpRdWVyeSIsIiQiLCJvcHRpb25zIiwicXVldWUiLCJlYWNoIiwic3VwcG9ydGVkIiwicHJvcCIsInRvVXBwZXJDYXNlIiwiYXR0ciIsInRvTG93ZXJDYXNlIiwiRmlsZVJlYWRlciIsImZpbGVzIiwiZmlsZSIsImlucHV0RWxlbSIsImluc3RhbmNlQ29uZmlnIiwiZXh0ZW5kIiwicGFyc2VOZXh0RmlsZSIsInJlYXNvbiIsImYiLCJiZWZvcmUiLCJyZXR1cm5lZCIsImFjdGlvbiIsImZpbGVDb21wbGV0ZSIsInVzZXJDb21wbGV0ZUZ1bmMiLCJyZXN1bHRzIiwiQ2h1bmtTdHJlYW1lciIsIl9oYW5kbGUiLCJfcGF1c2VkIiwiX2ZpbmlzaGVkIiwiX2Jhc2VJbmRleCIsIl9wYXJ0aWFsTGluZSIsIl9yb3dDb3VudCIsIl9zdGFydCIsIl9uZXh0Q2h1bmsiLCJpc0ZpcnN0Q2h1bmsiLCJfY29tcGxldGVSZXN1bHRzIiwiZXJyb3JzIiwiY29uZmlnQ29weSIsImNvcHkiLCJjaHVua1NpemUiLCJwYXJzZUludCIsInBhcnNlQ2h1bmsiLCJiZWZvcmVGaXJzdENodW5rIiwibW9kaWZpZWRDaHVuayIsImFnZ3JlZ2F0ZSIsInBhdXNlZCIsImFib3J0ZWQiLCJsYXN0SW5kZXgiLCJjdXJzb3IiLCJzdWJzdHJpbmciLCJmaW5pc2hlZEluY2x1ZGluZ1ByZXZpZXciLCJwcmV2aWV3IiwiV09SS0VSX0lEIiwiZmluaXNoZWQiLCJjb25jYXQiLCJfc2VuZEVycm9yIiwieGhyIiwiX3JlYWRDaHVuayIsIl9jaHVua0xvYWRlZCIsInVybCIsIlhNTEh0dHBSZXF1ZXN0Iiwid2l0aENyZWRlbnRpYWxzIiwib25sb2FkIiwiYmluZEZ1bmN0aW9uIiwib25lcnJvciIsIl9jaHVua0Vycm9yIiwib3BlbiIsImRvd25sb2FkUmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwiaGVhZGVyTmFtZSIsInNldFJlcXVlc3RIZWFkZXIiLCJlbmQiLCJzZW5kIiwiZXJyIiwibWVzc2FnZSIsInN0YXR1cyIsInJlYWR5U3RhdGUiLCJjb250ZW50UmFuZ2UiLCJnZXRSZXNwb25zZUhlYWRlciIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwiZ2V0RmlsZVNpemUiLCJyZXNwb25zZVRleHQiLCJlcnJvck1lc3NhZ2UiLCJlcnJvclRleHQiLCJzdGF0dXNUZXh0IiwicmVhZGVyIiwic2xpY2UiLCJ1c2luZ0FzeW5jUmVhZGVyIiwid2Via2l0U2xpY2UiLCJtb3pTbGljZSIsIkZpbGVSZWFkZXJTeW5jIiwiTWF0aCIsIm1pbiIsInNpemUiLCJ0eHQiLCJyZWFkQXNUZXh0IiwiZW5jb2RpbmciLCJyZXN1bHQiLCJldmVudCIsInJlbWFpbmluZyIsInBhcnNlT25EYXRhIiwiX3N0cmVhbURhdGEiLCJfc3RyZWFtRW5kIiwiX3N0cmVhbUVycm9yIiwic2hpZnQiLCJfc3RyZWFtQ2xlYW5VcCIsInJlbW92ZUxpc3RlbmVyIiwiX3BhcnNlciIsIl9kZWxpbWl0ZXJFcnJvciIsIkZMT0FUIiwiX3N0ZXBDb3VudGVyIiwiX2Fib3J0ZWQiLCJfZmllbGRzIiwiX3Jlc3VsdHMiLCJuZWVkc0hlYWRlclJvdyIsInByb2Nlc3NSZXN1bHRzIiwiYWJvcnQiLCJhZGRFcnJvciIsInNraXBFbXB0eUxpbmVzIiwiaiIsImZpbGxIZWFkZXJGaWVsZHMiLCJmaWVsZCIsInBhcnNlRHluYW1pYyIsImFwcGx5SGVhZGVyQW5kRHluYW1pY1R5cGluZyIsInNob3VsZEFwcGx5RHluYW1pY1R5cGluZyIsInZhbCIsInBhcnNlRmxvYXQiLCJjb2RlIiwibXNnIiwiYmFzZUluZGV4IiwiaWdub3JlTGFzdFJvdyIsIm5BcHBlYXJzRmlyc3QiLCJudW1XaXRoTiIsImd1ZXNzTGluZUVuZGluZ3MiLCJkZWxpbUd1ZXNzIiwiYmVzdERlbGltIiwiYmVzdERlbHRhIiwiZmllbGRDb3VudFByZXZSb3ciLCJkZWxpbUNob2ljZXMiLCJkZWxpbSIsImRlbHRhIiwiYXZnRmllbGRDb3VudCIsImVtcHR5TGluZXNDb3VudCIsImZpZWxkQ291bnQiLCJhYnMiLCJzdWNjZXNzZnVsIiwiYmVzdERlbGltaXRlciIsImd1ZXNzRGVsaW1pdGVyIiwicGFyc2VyQ29uZmlnIiwicGF1c2UiLCJnZXRDaGFySW5kZXgiLCJyZXN1bWUiLCJjb21tZW50cyIsImZhc3RNb2RlIiwiaW5wdXRMZW4iLCJkZWxpbUxlbiIsIm5ld2xpbmVMZW4iLCJjb21tZW50c0xlbiIsInN0ZXBJc0Z1bmN0aW9uIiwibGFzdEN1cnNvciIsInJldHVybmFibGUiLCJyb3dzIiwicHVzaFJvdyIsImRvU3RlcCIsIm5leHREZWxpbSIsIm5leHROZXdsaW5lIiwic2F2ZVJvdyIsInF1b3RlU2VhcmNoIiwiaW5kZXgiLCJmaW5pc2giLCJuZXdDdXJzb3IiLCJzdG9wcGVkIiwibGluZWJyZWFrIiwidHJ1bmNhdGVkIiwiZSIsImhhbmRsZSIsImNvbXBsZXRlV29ya2VyIiwibm90SW1wbGVtZW50ZWQiLCJ0ZXJtaW5hdGUiLCJjcHkiLCJmdW5jIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzcmMiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX2hlbHBlcnMiLCJDU1ZQcm9jZXNzb3IiLCJkYXRhX2NvbmZpZyIsInJhd0RhdGEiLCJkZXRlY3REYXRhIiwicmF3RGF0YUlzVVJMIiwicGFyc2VDU1Z0b0pTT04iLCJjc3ZQYXJzZXIiLCJkdF9jb25maWciLCJwYXJzZWRKU09OIiwiX3BhcGFwYXJzZTIiLCJkZWZhdWx0IiwiY29uc29sZSIsImxvZyIsImVtaXQiLCJzZW5zaV9ncmlkX2NvbmZpZyIsIlNlbnNpR3JpZCIsImdjIiwiZ3JpZEV2ZW50IiwiX2V2ZW50MiIsIl9DU1ZQcm9jZXNzb3IyIiwianNvbiIsImNyZWF0ZVRhYmxlIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGlCQUFBQyxTQUFBLGlCQUFBQyxPQUNBQSxPQUFBRCxRQUFBRCxJQUNBLG1CQUFBRyxlQUFBQyxJQUNBRCxPQUFBLGVBQUFILEdBQ0EsaUJBQUFDLFFBQ0FBLFFBQUEsVUFBQUQsSUFFQUQsRUFBQSxVQUFBQyxJQVJBLENBU0NLLE9BQUEsV0FDRCxtQkNUQSxJQUFBQyxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBUCxRQUdBLElBQUFDLEVBQUFJLEVBQUFFLElBQ0FDLEVBQUFELEVBQ0FFLEdBQUEsRUFDQVQsWUFVQSxPQU5BVSxFQUFBSCxHQUFBSSxLQUFBVixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBTSxHQUdBTCxFQUFBUSxHQUFBLEVBR0FSLEVBQUFELFFBMkNBLE9BdENBTSxFQUFBTSxFQUFBRixFQUdBSixFQUFBTyxFQUFBUixFQUdBQyxFQUFBUSxFQUFBLFNBQUFkLEVBQUFlLEVBQUFDLEdBQ0FWLEVBQUFXLEVBQUFqQixFQUFBZSxJQUNBRyxPQUFBQyxlQUFBbkIsRUFBQWUsR0FDQUssY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElBQUFOLEtBTUFWLEVBQUFpQixFQUFBLFNBQUF2QixHQUNBa0IsT0FBQUMsZUFBQW5CLEVBQUEsY0FBaUR3QixPQUFBLEtBSWpEbEIsRUFBQW1CLEVBQUEsU0FBQXhCLEdBQ0EsSUFBQWUsRUFBQWYsS0FBQXlCLFdBQ0EsV0FBMkIsT0FBQXpCLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUssRUFBQVEsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBVixFQUFBVyxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFB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LEVBQUFDLFFBQUsxUixNQUFNL0UsR0FDUDRHLFNBQVV0RCxFQUNWK0MsU0FBVSxTQUFTcUYsR0FDZjZLLEVBQWE3SyxFQUNiZ0wsUUFBUUMsSUFBSUosR0FDWkYsRUFBVU8sS0FBSyxhQUFjTCxJQUVqQ2hRLE1BQU8sU0FBU29JLEVBQUs3RCxHQUNqQjRMLFFBQVFDLElBQUksc0NBQXVDN0wseUJBeEM5Q2lMLHFHQ3ZCckIsUUFBQTVZLEVBQUEsSUFDWTBaLDBKQUFaMVosRUFBQSxRQUNBQSxFQUFBLGlFQUlJLFNBQUEyWixFQUFhaFgsRUFBT0MsRUFBUUMsZ0dBQU1oQixDQUFBQyxLQUFBNlgsR0FDOUIsSUFBSUMsRUFBS0YsRUFBa0JqWCxTQUFTQyxhQUNmZ1gsRUFBa0JsWCxVQUd2Q1YsS0FBS2EsTUFBUWlYLEVBQUdqWCxNQUFRQSxHQUFnQmlYLEVBQUdqWCxNQUMzQ2IsS0FBS2MsT0FBU2dYLEVBQUdoWCxPQUFTQSxHQUFrQmdYLEVBQUdoWCxPQUcvQ2QsS0FBSytYLFVBQVksSUFBQUMsRUFBQVIsYUFHTHhWLElBQVRqQixHQUNPLElBQUFrWCxFQUFBVCxRQUFpQnpXLEdBRW5CMlYsaUJBQWlCLGFBQWMsU0FBU3dCLEdBQ3hDVCxRQUFRQyxJQUFJLDRCQUNaRCxRQUFRQyxJQUFJUSxHQUNaSixFQUFHL1csS0FBT21YLEVBQUtuWCxLQUNmb1giLCJmaWxlIjoiU2Vuc2lHcmlkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJTZW5zaUdyaWRcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiU2Vuc2lHcmlkXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlNlbnNpR3JpZFwiXSA9IGZhY3RvcnkoKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2KTtcbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnQtZW1pdHRlci1lczYnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXN0b21FdmVudCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgYXJvdW5kIGV2ZW50LWVtaXRlci1lczYgY2xhc3MgdG8gb3ZlcndyaXRlXG4gICAgICogaXRzIGBvbmAgbWV0aG9kIGJ5IG1vcmUgd2VsbCBrbm93biBhbmQgY29udmVudGlvbmFsIFxuICAgICAqIGBhZGRFdmVudExpc3RlbmVyYCBtZXRob2QgXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgU3RyaW5nIGZvciB0aGUgZXZlbnQgbmFtZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBsaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBpbnZva2VkXG4gICAgICovXG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm9uKHR5cGUsIGZ1bmN0aW9uIGxpc3RlbmVyKCl7XG4gICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKnJlbW92ZUV2ZW50TGlzdGVuZXIoKXtcblxuICAgIH1cblxuICAgIGRpc3BhdGNoRXZlbnQoKSB7XG5cbiAgICB9Ki9cbn0iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgLy90aGlzIGlzIHRvIHN0b3JlIG11bHRpcGxlIHRhYmxlIGluc3RhbmNlcyB1bmRlciBhXG4gICAgLy9zaW5nbGUgc2Vuc2kgZ3JpZCBpbnN0YW5jZVxuICAgIGluc3RhbmNlczogW10sXG4gICAgLy8gQWxsIGRlZmF1bHRzIHZhbHVlcyBmb3Igc2Vuc2ktZ3JpZCBpbnN0YW5jZXNcbiAgICBkZWZhdWx0czoge1xuICAgICAgICB0YWJsZV9jb25maWc6IHtcbiAgICAgICAgICAgIHdpZHRoOiA2MDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDQwMCxcbiAgICAgICAgICAgIGRhdGE6IFtdXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgREVGQVVMVF9WQUxVRVMgPSB7XG4gICAgZW1pdERlbGF5OiAxMCxcbiAgICBzdHJpY3RNb2RlOiBmYWxzZVxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBFdmVudEVtaXR0ZXJMaXN0ZW5lckZ1bmNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gb25jZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZm5cbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBFdmVudEVtaXR0ZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgRXZlbnRFbWl0dGVyTGlzdGVuZXJGdW5jW10+fSBfbGlzdGVuZXJzXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBldmVudHNcbiAqL1xuXG52YXIgRXZlbnRFbWl0dGVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHt7fX0gICAgICBbb3B0c11cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gIFtvcHRzLmVtaXREZWxheSA9IDEwXSAtIE51bWJlciBpbiBtcy4gU3BlY2lmaWVzIHdoZXRoZXIgZW1pdCB3aWxsIGJlIHN5bmMgb3IgYXN5bmMuIEJ5IGRlZmF1bHQgLSAxMG1zLiBJZiAwIC0gZmlyZXMgc3luY1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3RyaWN0TW9kZSA9IGZhbHNlXSAtIGlzIHRydWUsIEVtaXR0ZXIgdGhyb3dzIGVycm9yIG9uIGVtaXQgZXJyb3Igd2l0aCBubyBsaXN0ZW5lcnNcbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgICAgICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyBERUZBVUxUX1ZBTFVFUyA6IGFyZ3VtZW50c1swXTtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRFbWl0dGVyKTtcblxuICAgICAgICB2YXIgZW1pdERlbGF5ID0gdm9pZCAwLFxuICAgICAgICAgICAgc3RyaWN0TW9kZSA9IHZvaWQgMDtcblxuICAgICAgICBpZiAob3B0cy5oYXNPd25Qcm9wZXJ0eSgnZW1pdERlbGF5JykpIHtcbiAgICAgICAgICAgIGVtaXREZWxheSA9IG9wdHMuZW1pdERlbGF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW1pdERlbGF5ID0gREVGQVVMVF9WQUxVRVMuZW1pdERlbGF5O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VtaXREZWxheSA9IGVtaXREZWxheTtcblxuICAgICAgICBpZiAob3B0cy5oYXNPd25Qcm9wZXJ0eSgnc3RyaWN0TW9kZScpKSB7XG4gICAgICAgICAgICBzdHJpY3RNb2RlID0gb3B0cy5zdHJpY3RNb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0TW9kZSA9IERFRkFVTFRfVkFMVUVTLnN0cmljdE1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RyaWN0TW9kZSA9IHN0cmljdE1vZGU7XG5cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvbmNlID0gZmFsc2VdXG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhFdmVudEVtaXR0ZXIsIFt7XG4gICAgICAgIGtleTogJ19hZGRMaXN0ZW5uZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZExpc3Rlbm5lcih0eXBlLCBsaXN0ZW5lciwgb25jZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmV2ZW50cy5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1t0eXBlXSA9IFt7XG4gICAgICAgICAgICAgICAgICAgIG9uY2U6IG9uY2UsXG4gICAgICAgICAgICAgICAgICAgIGZuOiBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2godHlwZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1t0eXBlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgb25jZTogb25jZSxcbiAgICAgICAgICAgICAgICAgICAgZm46IGxpc3RlbmVyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogU3Vic2NyaWJlcyBvbiBldmVudCB0eXBlIHNwZWNpZmllZCBmdW5jdGlvblxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZExpc3Rlbm5lcih0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN1YnNjcmliZXMgb24gZXZlbnQgdHlwZSBzcGVjaWZpZWQgZnVuY3Rpb24gdG8gZmlyZSBvbmx5IG9uY2VcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uY2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5fYWRkTGlzdGVubmVyKHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmVzIGV2ZW50IHdpdGggc3BlY2lmaWVkIHR5cGUuIElmIHNwZWNpZmllZCBsaXN0ZW5lckZ1bmMgLSBkZWxldGVzIG9ubHkgb25lIGxpc3RlbmVyIG9mIHNwZWNpZmllZCB0eXBlXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2xpc3RlbmVyRnVuY11cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29mZicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnRUeXBlLCBsaXN0ZW5lckZ1bmMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciB0eXBlSW5kZXggPSB0aGlzLmV2ZW50cy5pbmRleE9mKGV2ZW50VHlwZSk7XG4gICAgICAgICAgICB2YXIgaGFzVHlwZSA9IGV2ZW50VHlwZSAmJiB0eXBlSW5kZXggIT09IC0xO1xuXG4gICAgICAgICAgICBpZiAoaGFzVHlwZSkge1xuICAgICAgICAgICAgICAgIGlmICghbGlzdGVuZXJGdW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudHMuc3BsaWNlKHR5cGVJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW1vdmVkRXZlbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZUxpc3RlbmVycyA9IF90aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUxpc3RlbmVycy5mb3JFYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0V2ZW50RW1pdHRlckxpc3RlbmVyRnVuY30gZm5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZHhcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGZuLCBpZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm4uZm4gPT09IGxpc3RlbmVyRnVuYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkRXZlbnRzLnVuc2hpZnQoaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlTGlzdGVuZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHlwZUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ldmVudHMuc3BsaWNlKHR5cGVJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQXBwbGllcyBhcmd1bWVudHMgdG8gc3BlY2lmaWVkIGV2ZW50IHR5cGVcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICAgICAgICAgKiBAcGFyYW0geypbXX0gZXZlbnRBcmd1bWVudHNcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2FwcGx5RXZlbnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBseUV2ZW50cyhldmVudFR5cGUsIGV2ZW50QXJndW1lbnRzKSB7XG4gICAgICAgICAgICB2YXIgdHlwZUxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdO1xuXG4gICAgICAgICAgICBpZiAoIXR5cGVMaXN0ZW5lcnMgfHwgIXR5cGVMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0cmljdE1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ05vIGxpc3RlbmVycyBzcGVjaWZpZWQgZm9yIGV2ZW50OiAnICsgZXZlbnRUeXBlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZW1vdmFibGVMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgICAgIHR5cGVMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZWVMaXN0ZW5lciwgaWR4KSB7XG4gICAgICAgICAgICAgICAgZWVMaXN0ZW5lci5mbi5hcHBseShudWxsLCBldmVudEFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKGVlTGlzdGVuZXIub25jZSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmFibGVMaXN0ZW5lcnMudW5zaGlmdChpZHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZW1vdmFibGVMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoaWR4KSB7XG4gICAgICAgICAgICAgICAgdHlwZUxpc3RlbmVycy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVtaXRzIGV2ZW50IHdpdGggc3BlY2lmaWVkIHR5cGUgYW5kIHBhcmFtcy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICAgICAgICogQHBhcmFtIGV2ZW50QXJnc1xuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZW1pdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZXZlbnRBcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgICAgIGV2ZW50QXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0RGVsYXkpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLl9hcHBseUV2ZW50cy5jYWxsKF90aGlzMiwgdHlwZSwgZXZlbnRBcmdzKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzLl9lbWl0RGVsYXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcHBseUV2ZW50cyh0eXBlLCBldmVudEFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVtaXRzIGV2ZW50IHdpdGggc3BlY2lmaWVkIHR5cGUgYW5kIHBhcmFtcyBzeW5jaHJvbm91c2x5LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgICAgICAgKiBAcGFyYW0gZXZlbnRBcmdzXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdlbWl0U3luYycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbWl0U3luYyh0eXBlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGV2ZW50QXJncyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgICAgICBldmVudEFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2FwcGx5RXZlbnRzKHR5cGUsIGV2ZW50QXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVzdHJveXMgRXZlbnRFbWl0dGVyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZXN0cm95JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbiIsIi8qKlxuICogY2hlY2tVUkxQYXR0cmVuIHNob3VsZCB0cnkgdG8gZGV0ZWN0IHdodGhlciB0aGUgcGFzc2VkXG4gKiBzdHJpbmcgaXMgYW4gVVJMLiBSdWRpbWVudGFyeSBhbmQgYXBwcm94aW1hdGVseS5cbiAqIEhlcmUgaXMgYSBncmVhdCBwaWVjZSBmb3Igc3RybmcgY2hlY2tpbmdcbiAqIGdvby5nbC9OU1ZVWWIgKHNob3JuZWRlZCBieSBnb29nbGUpXG4gKiBAcGFyYW0geyp9IHN0ciBUaGUgc3RyaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBpcyBtb3N0IGxpa2VseSB0byBiZSBhbiBVUkxcbiAqL1xuZnVuY3Rpb24gY2hlY2tVUkxQYXR0ZXJuKHN0cikge1xuICAgIGxldCBpc1VSTCA9IGZhbHNlLFxuICAgICAgICBjb25maWRlbmNlID0gMCxcbiAgICAgICAgLy9taW5pbWl6aW5nIHRoZSBzY29wZSB0byByZXF1aXJlZCBmb3JtYXQgZm9yIG5vd1xuICAgICAgICAvL0B0by1kbzogTUwgaXNzdWUgdG8gZGV0ZWN0IGFueSB2YWxpZCBmaWxlIGZvcm1hdC5cbiAgICAgICAgcmVxdWlyZWRGb3JtYXRzID0gWydqcycsICdqc29uJywgJ2NzdiddO1xuICAgIC8vZG9lcyB0aGUgc3RyaW5nIHN0YXJ0IHdpdGggaHR0cDovLyBvciBodHRwczovLyBbQWJzb2x1dGUgU2NoZW1lc11cbiAgICBpZiAoc3RyLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSB8fCBzdHIuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSkge1xuICAgICAgICBjb25maWRlbmNlICs9IDQwOyAvL3ZlcnkgY29uZmlkZW50XG4gICAgfVxuICAgIC8vZG9lcyB0aGUgc3RyaW5nIHN0YXJ0IHdpdGggLi8gb3IgLi4vIG9yIC8gW1JlYXRpdmUgU2NoZW1lc11cbiAgICBlbHNlIGlmIChzdHIuc3RhcnRzV2l0aCgnLi8nKSB8fCBzdHIuc3RhcnRzV2l0aCgnLi4vJykgfHwgc3RyLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICBjb25maWRlbmNlICs9IDQwOyAvL3ZlcnkgY29uZmlkZW50XG4gICAgfVxuICAgIC8vb2Z0ZW4gdGhlIGh0dHAgcGFydCBpcyBvbW1pdHRlZCBhbmQgaXQgc3RhcnRzIHdpdGggJ3d3dydcbiAgICBlbHNlIGlmKHN0ci5zdGFydHNXaXRoKCd3d3cnKSkge1xuICAgICAgICBjb25maWRlbmNlICs9IDQwOyAvL3ZlcnkgY29uZmlkZW50XG4gICAgfVxuICAgIC8vZG9lcyB0aGUgc3RyaW5nIGhhcyBhIGRvdCBhbmQgcHJvYmFibHkgZW5kcyB3aXRoIGEgZmlsZSBmb3JtYXRcbiAgICBpZihzdHIuaW5kZXhPZignLicpICE9PSAwKSB7XG4gICAgICAgIGxldCBhcnIgPSBzdHIuc3BsaXQoJy4nKSxcbiAgICAgICAgICAgIHByb2JhYmxlRm9ybWF0ID0gYXJyW2Fyci5sZW5ndGggLSAxXTtcblxuICAgICAgICAvL2hhdmluZyBhICcuJyBib29zdHMgbWluaW11bSBjb25maWRlbmNlXG4gICAgICAgIGNvbmZpZGVuY2UgKz0gNTsgXG5cbiAgICAgICAgcmVxdWlyZWRGb3JtYXRzLmZvckVhY2goZnVuY3Rpb24oZWxlbSl7XG4gICAgICAgICAgICBpZihwcm9iYWJsZUZvcm1hdCA9PT0gZWxlbSkge1xuICAgICAgICAgICAgICAgIC8vV2hhdCBpZiBhIGRhdGEgZW5kIHdpdGggc3RyaW5nIGhhdmluZyBmb3JtYXRzIGRlZmluZWRcbiAgICAgICAgICAgICAgICBjb25maWRlbmNlICs9IDM1O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL2lmIHRoZSBjb25maWRlbmNlIGlzIDQwIChhdGxlYXN0IDIgY29uZGl0aW9ucyBtYXRjaGVkKSBwb2ludHMgaXQgaXMgbGlrZWx5IHRvIFxuICAgIC8vIGJlIGFuIFVSTFxuICAgIGlmKGNvbmZpZGVuY2UgPj0gNDApIHtcbiAgICAgICAgaXNVUkwgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBpc1VSTDtcbn1cblxuZXhwb3J0IHtjaGVja1VSTFBhdHRlcm59OyIsIi8qIVxuXHRQYXBhIFBhcnNlXG5cdHY0LjMuN1xuXHRodHRwczovL2dpdGh1Yi5jb20vbWhvbHQvUGFwYVBhcnNlXG5cdExpY2Vuc2U6IE1JVFxuKi9cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KVxue1xuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHR7XG5cdFx0Ly8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKVxuXHR7XG5cdFx0Ly8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG5cdFx0Ly8gb25seSBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG5cdFx0Ly8gbGlrZSBOb2RlLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG5cdFx0cm9vdC5QYXBhID0gZmFjdG9yeSgpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uKClcbntcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBnbG9iYWwgPSAoZnVuY3Rpb24gKCkge1xuXHRcdC8vIGFsdGVybmF0aXZlIG1ldGhvZCwgc2ltaWxhciB0byBgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKWBcblx0XHQvLyBidXQgd2l0aG91dCB1c2luZyBgZXZhbGAgKHdoaWNoIGlzIGRpc2FibGVkIHdoZW5cblx0XHQvLyB1c2luZyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG5cblx0XHRpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBzZWxmOyB9XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiB3aW5kb3c7IH1cblx0XHRpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGdsb2JhbDsgfVxuXG5cdFx0Ly8gV2hlbiBydW5uaW5nIHRlc3RzIG5vbmUgb2YgdGhlIGFib3ZlIGhhdmUgYmVlbiBkZWZpbmVkXG5cdFx0cmV0dXJuIHt9O1xuXHR9KSgpO1xuXG5cblx0dmFyIElTX1dPUktFUiA9ICFnbG9iYWwuZG9jdW1lbnQgJiYgISFnbG9iYWwucG9zdE1lc3NhZ2UsXG5cdFx0SVNfUEFQQV9XT1JLRVIgPSBJU19XT1JLRVIgJiYgLyhcXD98JilwYXBhd29ya2VyKD18JnwkKS8udGVzdChnbG9iYWwubG9jYXRpb24uc2VhcmNoKSxcblx0XHRMT0FERURfU1lOQyA9IGZhbHNlLCBBVVRPX1NDUklQVF9QQVRIO1xuXHR2YXIgd29ya2VycyA9IHt9LCB3b3JrZXJJZENvdW50ZXIgPSAwO1xuXG5cdHZhciBQYXBhID0ge307XG5cblx0UGFwYS5wYXJzZSA9IENzdlRvSnNvbjtcblx0UGFwYS51bnBhcnNlID0gSnNvblRvQ3N2O1xuXG5cdFBhcGEuUkVDT1JEX1NFUCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMzApO1xuXHRQYXBhLlVOSVRfU0VQID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMSk7XG5cdFBhcGEuQllURV9PUkRFUl9NQVJLID0gJ1xcdWZlZmYnO1xuXHRQYXBhLkJBRF9ERUxJTUlURVJTID0gWydcXHInLCAnXFxuJywgJ1wiJywgUGFwYS5CWVRFX09SREVSX01BUktdO1xuXHRQYXBhLldPUktFUlNfU1VQUE9SVEVEID0gIUlTX1dPUktFUiAmJiAhIWdsb2JhbC5Xb3JrZXI7XG5cdFBhcGEuU0NSSVBUX1BBVEggPSBudWxsO1x0Ly8gTXVzdCBiZSBzZXQgYnkgeW91ciBjb2RlIGlmIHlvdSB1c2Ugd29ya2VycyBhbmQgdGhpcyBsaWIgaXMgbG9hZGVkIGFzeW5jaHJvbm91c2x5XG5cblx0Ly8gQ29uZmlndXJhYmxlIGNodW5rIHNpemVzIGZvciBsb2NhbCBhbmQgcmVtb3RlIGZpbGVzLCByZXNwZWN0aXZlbHlcblx0UGFwYS5Mb2NhbENodW5rU2l6ZSA9IDEwMjQgKiAxMDI0ICogMTA7XHQvLyAxMCBNQlxuXHRQYXBhLlJlbW90ZUNodW5rU2l6ZSA9IDEwMjQgKiAxMDI0ICogNTtcdC8vIDUgTUJcblx0UGFwYS5EZWZhdWx0RGVsaW1pdGVyID0gJywnO1x0XHRcdC8vIFVzZWQgaWYgbm90IHNwZWNpZmllZCBhbmQgZGV0ZWN0aW9uIGZhaWxzXG5cblx0Ly8gRXhwb3NlZCBmb3IgdGVzdGluZyBhbmQgZGV2ZWxvcG1lbnQgb25seVxuXHRQYXBhLlBhcnNlciA9IFBhcnNlcjtcblx0UGFwYS5QYXJzZXJIYW5kbGUgPSBQYXJzZXJIYW5kbGU7XG5cdFBhcGEuTmV0d29ya1N0cmVhbWVyID0gTmV0d29ya1N0cmVhbWVyO1xuXHRQYXBhLkZpbGVTdHJlYW1lciA9IEZpbGVTdHJlYW1lcjtcblx0UGFwYS5TdHJpbmdTdHJlYW1lciA9IFN0cmluZ1N0cmVhbWVyO1xuXHRQYXBhLlJlYWRhYmxlU3RyZWFtU3RyZWFtZXIgPSBSZWFkYWJsZVN0cmVhbVN0cmVhbWVyO1xuXG5cdGlmIChnbG9iYWwualF1ZXJ5KVxuXHR7XG5cdFx0dmFyICQgPSBnbG9iYWwualF1ZXJ5O1xuXHRcdCQuZm4ucGFyc2UgPSBmdW5jdGlvbihvcHRpb25zKVxuXHRcdHtcblx0XHRcdHZhciBjb25maWcgPSBvcHRpb25zLmNvbmZpZyB8fCB7fTtcblx0XHRcdHZhciBxdWV1ZSA9IFtdO1xuXG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oaWR4KVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgc3VwcG9ydGVkID0gJCh0aGlzKS5wcm9wKCd0YWdOYW1lJykudG9VcHBlckNhc2UoKSA9PT0gJ0lOUFVUJ1xuXHRcdFx0XHRcdFx0XHRcdCYmICQodGhpcykuYXR0cigndHlwZScpLnRvTG93ZXJDYXNlKCkgPT09ICdmaWxlJ1xuXHRcdFx0XHRcdFx0XHRcdCYmIGdsb2JhbC5GaWxlUmVhZGVyO1xuXG5cdFx0XHRcdGlmICghc3VwcG9ydGVkIHx8ICF0aGlzLmZpbGVzIHx8IHRoaXMuZmlsZXMubGVuZ3RoID09PSAwKVxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1x0Ly8gY29udGludWUgdG8gbmV4dCBpbnB1dCBlbGVtZW50XG5cblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZpbGVzLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cXVldWUucHVzaCh7XG5cdFx0XHRcdFx0XHRmaWxlOiB0aGlzLmZpbGVzW2ldLFxuXHRcdFx0XHRcdFx0aW5wdXRFbGVtOiB0aGlzLFxuXHRcdFx0XHRcdFx0aW5zdGFuY2VDb25maWc6ICQuZXh0ZW5kKHt9LCBjb25maWcpXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRwYXJzZU5leHRGaWxlKCk7XHQvLyBiZWdpbiBwYXJzaW5nXG5cdFx0XHRyZXR1cm4gdGhpcztcdFx0Ly8gbWFpbnRhaW5zIGNoYWluYWJpbGl0eVxuXG5cblx0XHRcdGZ1bmN0aW9uIHBhcnNlTmV4dEZpbGUoKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAocXVldWUubGVuZ3RoID09PSAwKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5jb21wbGV0ZSkpXG5cdFx0XHRcdFx0XHRvcHRpb25zLmNvbXBsZXRlKCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGYgPSBxdWV1ZVswXTtcblxuXHRcdFx0XHRpZiAoaXNGdW5jdGlvbihvcHRpb25zLmJlZm9yZSkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBvcHRpb25zLmJlZm9yZShmLmZpbGUsIGYuaW5wdXRFbGVtKTtcblxuXHRcdFx0XHRcdGlmICh0eXBlb2YgcmV0dXJuZWQgPT09ICdvYmplY3QnKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlmIChyZXR1cm5lZC5hY3Rpb24gPT09ICdhYm9ydCcpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGVycm9yKCdBYm9ydEVycm9yJywgZi5maWxlLCBmLmlucHV0RWxlbSwgcmV0dXJuZWQucmVhc29uKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1x0Ly8gQWJvcnRzIGFsbCBxdWV1ZWQgZmlsZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgaWYgKHJldHVybmVkLmFjdGlvbiA9PT0gJ3NraXAnKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRmaWxlQ29tcGxldGUoKTtcdC8vIHBhcnNlIHRoZSBuZXh0IGZpbGUgaW4gdGhlIHF1ZXVlLCBpZiBhbnlcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIHJldHVybmVkLmNvbmZpZyA9PT0gJ29iamVjdCcpXG5cdFx0XHRcdFx0XHRcdGYuaW5zdGFuY2VDb25maWcgPSAkLmV4dGVuZChmLmluc3RhbmNlQ29uZmlnLCByZXR1cm5lZC5jb25maWcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmIChyZXR1cm5lZCA9PT0gJ3NraXAnKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGZpbGVDb21wbGV0ZSgpO1x0Ly8gcGFyc2UgdGhlIG5leHQgZmlsZSBpbiB0aGUgcXVldWUsIGlmIGFueVxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdyYXAgdXAgdGhlIHVzZXIncyBjb21wbGV0ZSBjYWxsYmFjaywgaWYgYW55LCBzbyB0aGF0IG91cnMgYWxzbyBnZXRzIGV4ZWN1dGVkXG5cdFx0XHRcdHZhciB1c2VyQ29tcGxldGVGdW5jID0gZi5pbnN0YW5jZUNvbmZpZy5jb21wbGV0ZTtcblx0XHRcdFx0Zi5pbnN0YW5jZUNvbmZpZy5jb21wbGV0ZSA9IGZ1bmN0aW9uKHJlc3VsdHMpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoaXNGdW5jdGlvbih1c2VyQ29tcGxldGVGdW5jKSlcblx0XHRcdFx0XHRcdHVzZXJDb21wbGV0ZUZ1bmMocmVzdWx0cywgZi5maWxlLCBmLmlucHV0RWxlbSk7XG5cdFx0XHRcdFx0ZmlsZUNvbXBsZXRlKCk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0UGFwYS5wYXJzZShmLmZpbGUsIGYuaW5zdGFuY2VDb25maWcpO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBlcnJvcihuYW1lLCBmaWxlLCBlbGVtLCByZWFzb24pXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuZXJyb3IpKVxuXHRcdFx0XHRcdG9wdGlvbnMuZXJyb3Ioe25hbWU6IG5hbWV9LCBmaWxlLCBlbGVtLCByZWFzb24pO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBmaWxlQ29tcGxldGUoKVxuXHRcdFx0e1xuXHRcdFx0XHRxdWV1ZS5zcGxpY2UoMCwgMSk7XG5cdFx0XHRcdHBhcnNlTmV4dEZpbGUoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXG5cdGlmIChJU19QQVBBX1dPUktFUilcblx0e1xuXHRcdGdsb2JhbC5vbm1lc3NhZ2UgPSB3b3JrZXJUaHJlYWRSZWNlaXZlZE1lc3NhZ2U7XG5cdH1cblx0ZWxzZSBpZiAoUGFwYS5XT1JLRVJTX1NVUFBPUlRFRClcblx0e1xuXHRcdEFVVE9fU0NSSVBUX1BBVEggPSBnZXRTY3JpcHRQYXRoKCk7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgc2NyaXB0IHdhcyBsb2FkZWQgc3luY2hyb25vdXNseVxuXHRcdGlmICghZG9jdW1lbnQuYm9keSlcblx0XHR7XG5cdFx0XHQvLyBCb2R5IGRvZXNuJ3QgZXhpc3QgeWV0LCBtdXN0IGJlIHN5bmNocm9ub3VzXG5cdFx0XHRMT0FERURfU1lOQyA9IHRydWU7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRMT0FERURfU1lOQyA9IHRydWU7XG5cdFx0XHR9LCB0cnVlKTtcblx0XHR9XG5cdH1cblxuXG5cblxuXHRmdW5jdGlvbiBDc3ZUb0pzb24oX2lucHV0LCBfY29uZmlnKVxuXHR7XG5cdFx0X2NvbmZpZyA9IF9jb25maWcgfHwge307XG5cdFx0dmFyIGR5bmFtaWNUeXBpbmcgPSBfY29uZmlnLmR5bmFtaWNUeXBpbmcgfHwgZmFsc2U7XG5cdFx0aWYgKGlzRnVuY3Rpb24oZHluYW1pY1R5cGluZykpIHtcblx0XHRcdF9jb25maWcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uID0gZHluYW1pY1R5cGluZztcblx0XHRcdC8vIFdpbGwgYmUgZmlsbGVkIG9uIGZpcnN0IHJvdyBjYWxsXG5cdFx0XHRkeW5hbWljVHlwaW5nID0ge307XG5cdFx0fVxuXHRcdF9jb25maWcuZHluYW1pY1R5cGluZyA9IGR5bmFtaWNUeXBpbmc7XG5cblx0XHRpZiAoX2NvbmZpZy53b3JrZXIgJiYgUGFwYS5XT1JLRVJTX1NVUFBPUlRFRClcblx0XHR7XG5cdFx0XHR2YXIgdyA9IG5ld1dvcmtlcigpO1xuXG5cdFx0XHR3LnVzZXJTdGVwID0gX2NvbmZpZy5zdGVwO1xuXHRcdFx0dy51c2VyQ2h1bmsgPSBfY29uZmlnLmNodW5rO1xuXHRcdFx0dy51c2VyQ29tcGxldGUgPSBfY29uZmlnLmNvbXBsZXRlO1xuXHRcdFx0dy51c2VyRXJyb3IgPSBfY29uZmlnLmVycm9yO1xuXG5cdFx0XHRfY29uZmlnLnN0ZXAgPSBpc0Z1bmN0aW9uKF9jb25maWcuc3RlcCk7XG5cdFx0XHRfY29uZmlnLmNodW5rID0gaXNGdW5jdGlvbihfY29uZmlnLmNodW5rKTtcblx0XHRcdF9jb25maWcuY29tcGxldGUgPSBpc0Z1bmN0aW9uKF9jb25maWcuY29tcGxldGUpO1xuXHRcdFx0X2NvbmZpZy5lcnJvciA9IGlzRnVuY3Rpb24oX2NvbmZpZy5lcnJvcik7XG5cdFx0XHRkZWxldGUgX2NvbmZpZy53b3JrZXI7XHQvLyBwcmV2ZW50IGluZmluaXRlIGxvb3BcblxuXHRcdFx0dy5wb3N0TWVzc2FnZSh7XG5cdFx0XHRcdGlucHV0OiBfaW5wdXQsXG5cdFx0XHRcdGNvbmZpZzogX2NvbmZpZyxcblx0XHRcdFx0d29ya2VySWQ6IHcuaWRcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIHN0cmVhbWVyID0gbnVsbDtcblx0XHRpZiAodHlwZW9mIF9pbnB1dCA9PT0gJ3N0cmluZycpXG5cdFx0e1xuXHRcdFx0aWYgKF9jb25maWcuZG93bmxvYWQpXG5cdFx0XHRcdHN0cmVhbWVyID0gbmV3IE5ldHdvcmtTdHJlYW1lcihfY29uZmlnKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0c3RyZWFtZXIgPSBuZXcgU3RyaW5nU3RyZWFtZXIoX2NvbmZpZyk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKF9pbnB1dC5yZWFkYWJsZSA9PT0gdHJ1ZSAmJiBpc0Z1bmN0aW9uKF9pbnB1dC5yZWFkKSAmJiBpc0Z1bmN0aW9uKF9pbnB1dC5vbikpXG5cdFx0e1xuXHRcdFx0c3RyZWFtZXIgPSBuZXcgUmVhZGFibGVTdHJlYW1TdHJlYW1lcihfY29uZmlnKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGdsb2JhbC5GaWxlICYmIF9pbnB1dCBpbnN0YW5jZW9mIEZpbGUpIHx8IF9pbnB1dCBpbnN0YW5jZW9mIE9iamVjdClcdC8vIC4uLlNhZmFyaS4gKHNlZSBpc3N1ZSAjMTA2KVxuXHRcdFx0c3RyZWFtZXIgPSBuZXcgRmlsZVN0cmVhbWVyKF9jb25maWcpO1xuXG5cdFx0cmV0dXJuIHN0cmVhbWVyLnN0cmVhbShfaW5wdXQpO1xuXHR9XG5cblxuXG5cblxuXG5cdGZ1bmN0aW9uIEpzb25Ub0NzdihfaW5wdXQsIF9jb25maWcpXG5cdHtcblx0XHR2YXIgX291dHB1dCA9ICcnO1xuXHRcdHZhciBfZmllbGRzID0gW107XG5cblx0XHQvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cblxuXHRcdC8qKiB3aGV0aGVyIHRvIHN1cnJvdW5kIGV2ZXJ5IGRhdHVtIHdpdGggcXVvdGVzICovXG5cdFx0dmFyIF9xdW90ZXMgPSBmYWxzZTtcblxuXHRcdC8qKiB3aGV0aGVyIHRvIHdyaXRlIGhlYWRlcnMgKi9cblx0XHR2YXIgX3dyaXRlSGVhZGVyID0gdHJ1ZTtcblxuXHRcdC8qKiBkZWxpbWl0aW5nIGNoYXJhY3RlciAqL1xuXHRcdHZhciBfZGVsaW1pdGVyID0gJywnO1xuXG5cdFx0LyoqIG5ld2xpbmUgY2hhcmFjdGVyKHMpICovXG5cdFx0dmFyIF9uZXdsaW5lID0gJ1xcclxcbic7XG5cblx0XHQvKiogcXVvdGUgY2hhcmFjdGVyICovXG5cdFx0dmFyIF9xdW90ZUNoYXIgPSAnXCInO1xuXG5cdFx0dW5wYWNrQ29uZmlnKCk7XG5cblx0XHR2YXIgcXVvdGVDaGFyUmVnZXggPSBuZXcgUmVnRXhwKF9xdW90ZUNoYXIsICdnJyk7XG5cblx0XHRpZiAodHlwZW9mIF9pbnB1dCA9PT0gJ3N0cmluZycpXG5cdFx0XHRfaW5wdXQgPSBKU09OLnBhcnNlKF9pbnB1dCk7XG5cblx0XHRpZiAoX2lucHV0IGluc3RhbmNlb2YgQXJyYXkpXG5cdFx0e1xuXHRcdFx0aWYgKCFfaW5wdXQubGVuZ3RoIHx8IF9pbnB1dFswXSBpbnN0YW5jZW9mIEFycmF5KVxuXHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKG51bGwsIF9pbnB1dCk7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgX2lucHV0WzBdID09PSAnb2JqZWN0Jylcblx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShvYmplY3RLZXlzKF9pbnB1dFswXSksIF9pbnB1dCk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKHR5cGVvZiBfaW5wdXQgPT09ICdvYmplY3QnKVxuXHRcdHtcblx0XHRcdGlmICh0eXBlb2YgX2lucHV0LmRhdGEgPT09ICdzdHJpbmcnKVxuXHRcdFx0XHRfaW5wdXQuZGF0YSA9IEpTT04ucGFyc2UoX2lucHV0LmRhdGEpO1xuXG5cdFx0XHRpZiAoX2lucHV0LmRhdGEgaW5zdGFuY2VvZiBBcnJheSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKCFfaW5wdXQuZmllbGRzKVxuXHRcdFx0XHRcdF9pbnB1dC5maWVsZHMgPSAgX2lucHV0Lm1ldGEgJiYgX2lucHV0Lm1ldGEuZmllbGRzO1xuXG5cdFx0XHRcdGlmICghX2lucHV0LmZpZWxkcylcblx0XHRcdFx0XHRfaW5wdXQuZmllbGRzID0gIF9pbnB1dC5kYXRhWzBdIGluc3RhbmNlb2YgQXJyYXlcblx0XHRcdFx0XHRcdFx0XHRcdD8gX2lucHV0LmZpZWxkc1xuXHRcdFx0XHRcdFx0XHRcdFx0OiBvYmplY3RLZXlzKF9pbnB1dC5kYXRhWzBdKTtcblxuXHRcdFx0XHRpZiAoIShfaW5wdXQuZGF0YVswXSBpbnN0YW5jZW9mIEFycmF5KSAmJiB0eXBlb2YgX2lucHV0LmRhdGFbMF0gIT09ICdvYmplY3QnKVxuXHRcdFx0XHRcdF9pbnB1dC5kYXRhID0gW19pbnB1dC5kYXRhXTtcdC8vIGhhbmRsZXMgaW5wdXQgbGlrZSBbMSwyLDNdIG9yIFsnYXNkZiddXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXJpYWxpemUoX2lucHV0LmZpZWxkcyB8fCBbXSwgX2lucHV0LmRhdGEgfHwgW10pO1xuXHRcdH1cblxuXHRcdC8vIERlZmF1bHQgKGFueSB2YWxpZCBwYXRocyBzaG91bGQgcmV0dXJuIGJlZm9yZSB0aGlzKVxuXHRcdHRocm93ICdleGNlcHRpb246IFVuYWJsZSB0byBzZXJpYWxpemUgdW5yZWNvZ25pemVkIGlucHV0JztcblxuXG5cdFx0ZnVuY3Rpb24gdW5wYWNrQ29uZmlnKClcblx0XHR7XG5cdFx0XHRpZiAodHlwZW9mIF9jb25maWcgIT09ICdvYmplY3QnKVxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdGlmICh0eXBlb2YgX2NvbmZpZy5kZWxpbWl0ZXIgPT09ICdzdHJpbmcnXG5cdFx0XHRcdCYmIF9jb25maWcuZGVsaW1pdGVyLmxlbmd0aCA9PT0gMVxuXHRcdFx0XHQmJiBQYXBhLkJBRF9ERUxJTUlURVJTLmluZGV4T2YoX2NvbmZpZy5kZWxpbWl0ZXIpID09PSAtMSlcblx0XHRcdHtcblx0XHRcdFx0X2RlbGltaXRlciA9IF9jb25maWcuZGVsaW1pdGVyO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIF9jb25maWcucXVvdGVzID09PSAnYm9vbGVhbidcblx0XHRcdFx0fHwgX2NvbmZpZy5xdW90ZXMgaW5zdGFuY2VvZiBBcnJheSlcblx0XHRcdFx0X3F1b3RlcyA9IF9jb25maWcucXVvdGVzO1xuXG5cdFx0XHRpZiAodHlwZW9mIF9jb25maWcubmV3bGluZSA9PT0gJ3N0cmluZycpXG5cdFx0XHRcdF9uZXdsaW5lID0gX2NvbmZpZy5uZXdsaW5lO1xuXG5cdFx0XHRpZiAodHlwZW9mIF9jb25maWcucXVvdGVDaGFyID09PSAnc3RyaW5nJylcblx0XHRcdFx0X3F1b3RlQ2hhciA9IF9jb25maWcucXVvdGVDaGFyO1xuXG5cdFx0XHRpZiAodHlwZW9mIF9jb25maWcuaGVhZGVyID09PSAnYm9vbGVhbicpXG5cdFx0XHRcdF93cml0ZUhlYWRlciA9IF9jb25maWcuaGVhZGVyO1xuXHRcdH1cblxuXG5cdFx0LyoqIFR1cm5zIGFuIG9iamVjdCdzIGtleXMgaW50byBhbiBhcnJheSAqL1xuXHRcdGZ1bmN0aW9uIG9iamVjdEtleXMob2JqKVxuXHRcdHtcblx0XHRcdGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jylcblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0dmFyIGtleXMgPSBbXTtcblx0XHRcdGZvciAodmFyIGtleSBpbiBvYmopXG5cdFx0XHRcdGtleXMucHVzaChrZXkpO1xuXHRcdFx0cmV0dXJuIGtleXM7XG5cdFx0fVxuXG5cdFx0LyoqIFRoZSBkb3VibGUgZm9yIGxvb3AgdGhhdCBpdGVyYXRlcyB0aGUgZGF0YSBhbmQgd3JpdGVzIG91dCBhIENTViBzdHJpbmcgaW5jbHVkaW5nIGhlYWRlciByb3cgKi9cblx0XHRmdW5jdGlvbiBzZXJpYWxpemUoZmllbGRzLCBkYXRhKVxuXHRcdHtcblx0XHRcdHZhciBjc3YgPSAnJztcblxuXHRcdFx0aWYgKHR5cGVvZiBmaWVsZHMgPT09ICdzdHJpbmcnKVxuXHRcdFx0XHRmaWVsZHMgPSBKU09OLnBhcnNlKGZpZWxkcyk7XG5cdFx0XHRpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKVxuXHRcdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblxuXHRcdFx0dmFyIGhhc0hlYWRlciA9IGZpZWxkcyBpbnN0YW5jZW9mIEFycmF5ICYmIGZpZWxkcy5sZW5ndGggPiAwO1xuXHRcdFx0dmFyIGRhdGFLZXllZEJ5RmllbGQgPSAhKGRhdGFbMF0gaW5zdGFuY2VvZiBBcnJheSk7XG5cblx0XHRcdC8vIElmIHRoZXJlIGEgaGVhZGVyIHJvdywgd3JpdGUgaXQgZmlyc3Rcblx0XHRcdGlmIChoYXNIZWFkZXIgJiYgX3dyaXRlSGVhZGVyKVxuXHRcdFx0e1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChpID4gMClcblx0XHRcdFx0XHRcdGNzdiArPSBfZGVsaW1pdGVyO1xuXHRcdFx0XHRcdGNzdiArPSBzYWZlKGZpZWxkc1tpXSwgaSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGRhdGEubGVuZ3RoID4gMClcblx0XHRcdFx0XHRjc3YgKz0gX25ld2xpbmU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZW4gd3JpdGUgb3V0IHRoZSBkYXRhXG5cdFx0XHRmb3IgKHZhciByb3cgPSAwOyByb3cgPCBkYXRhLmxlbmd0aDsgcm93KyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBtYXhDb2wgPSBoYXNIZWFkZXIgPyBmaWVsZHMubGVuZ3RoIDogZGF0YVtyb3ddLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBtYXhDb2w7IGNvbCsrKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGNvbCA+IDApXG5cdFx0XHRcdFx0XHRjc3YgKz0gX2RlbGltaXRlcjtcblx0XHRcdFx0XHR2YXIgY29sSWR4ID0gaGFzSGVhZGVyICYmIGRhdGFLZXllZEJ5RmllbGQgPyBmaWVsZHNbY29sXSA6IGNvbDtcblx0XHRcdFx0XHRjc3YgKz0gc2FmZShkYXRhW3Jvd11bY29sSWR4XSwgY29sKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChyb3cgPCBkYXRhLmxlbmd0aCAtIDEpXG5cdFx0XHRcdFx0Y3N2ICs9IF9uZXdsaW5lO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY3N2O1xuXHRcdH1cblxuXHRcdC8qKiBFbmNsb3NlcyBhIHZhbHVlIGFyb3VuZCBxdW90ZXMgaWYgbmVlZGVkIChtYWtlcyBhIHZhbHVlIHNhZmUgZm9yIENTViBpbnNlcnRpb24pICovXG5cdFx0ZnVuY3Rpb24gc2FmZShzdHIsIGNvbClcblx0XHR7XG5cdFx0XHRpZiAodHlwZW9mIHN0ciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3RyID09PSBudWxsKVxuXHRcdFx0XHRyZXR1cm4gJyc7XG5cblx0XHRcdHN0ciA9IHN0ci50b1N0cmluZygpLnJlcGxhY2UocXVvdGVDaGFyUmVnZXgsIF9xdW90ZUNoYXIrX3F1b3RlQ2hhcik7XG5cblx0XHRcdHZhciBuZWVkc1F1b3RlcyA9ICh0eXBlb2YgX3F1b3RlcyA9PT0gJ2Jvb2xlYW4nICYmIF9xdW90ZXMpXG5cdFx0XHRcdFx0XHRcdHx8IChfcXVvdGVzIGluc3RhbmNlb2YgQXJyYXkgJiYgX3F1b3Rlc1tjb2xdKVxuXHRcdFx0XHRcdFx0XHR8fCBoYXNBbnkoc3RyLCBQYXBhLkJBRF9ERUxJTUlURVJTKVxuXHRcdFx0XHRcdFx0XHR8fCBzdHIuaW5kZXhPZihfZGVsaW1pdGVyKSA+IC0xXG5cdFx0XHRcdFx0XHRcdHx8IHN0ci5jaGFyQXQoMCkgPT09ICcgJ1xuXHRcdFx0XHRcdFx0XHR8fCBzdHIuY2hhckF0KHN0ci5sZW5ndGggLSAxKSA9PT0gJyAnO1xuXG5cdFx0XHRyZXR1cm4gbmVlZHNRdW90ZXMgPyBfcXVvdGVDaGFyICsgc3RyICsgX3F1b3RlQ2hhciA6IHN0cjtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYXNBbnkoc3RyLCBzdWJzdHJpbmdzKVxuXHRcdHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic3RyaW5ncy5sZW5ndGg7IGkrKylcblx0XHRcdFx0aWYgKHN0ci5pbmRleE9mKHN1YnN0cmluZ3NbaV0pID4gLTEpXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0LyoqIENodW5rU3RyZWFtZXIgaXMgdGhlIGJhc2UgcHJvdG90eXBlIGZvciB2YXJpb3VzIHN0cmVhbWVyIGltcGxlbWVudGF0aW9ucy4gKi9cblx0ZnVuY3Rpb24gQ2h1bmtTdHJlYW1lcihjb25maWcpXG5cdHtcblx0XHR0aGlzLl9oYW5kbGUgPSBudWxsO1xuXHRcdHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuXHRcdHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG5cdFx0dGhpcy5faW5wdXQgPSBudWxsO1xuXHRcdHRoaXMuX2Jhc2VJbmRleCA9IDA7XG5cdFx0dGhpcy5fcGFydGlhbExpbmUgPSAnJztcblx0XHR0aGlzLl9yb3dDb3VudCA9IDA7XG5cdFx0dGhpcy5fc3RhcnQgPSAwO1xuXHRcdHRoaXMuX25leHRDaHVuayA9IG51bGw7XG5cdFx0dGhpcy5pc0ZpcnN0Q2h1bmsgPSB0cnVlO1xuXHRcdHRoaXMuX2NvbXBsZXRlUmVzdWx0cyA9IHtcblx0XHRcdGRhdGE6IFtdLFxuXHRcdFx0ZXJyb3JzOiBbXSxcblx0XHRcdG1ldGE6IHt9XG5cdFx0fTtcblx0XHRyZXBsYWNlQ29uZmlnLmNhbGwodGhpcywgY29uZmlnKTtcblxuXHRcdHRoaXMucGFyc2VDaHVuayA9IGZ1bmN0aW9uKGNodW5rKVxuXHRcdHtcblx0XHRcdC8vIEZpcnN0IGNodW5rIHByZS1wcm9jZXNzaW5nXG5cdFx0XHRpZiAodGhpcy5pc0ZpcnN0Q2h1bmsgJiYgaXNGdW5jdGlvbih0aGlzLl9jb25maWcuYmVmb3JlRmlyc3RDaHVuaykpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBtb2RpZmllZENodW5rID0gdGhpcy5fY29uZmlnLmJlZm9yZUZpcnN0Q2h1bmsoY2h1bmspO1xuXHRcdFx0XHRpZiAobW9kaWZpZWRDaHVuayAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRcdGNodW5rID0gbW9kaWZpZWRDaHVuaztcblx0XHRcdH1cblx0XHRcdHRoaXMuaXNGaXJzdENodW5rID0gZmFsc2U7XG5cblx0XHRcdC8vIFJlam9pbiB0aGUgbGluZSB3ZSBsaWtlbHkganVzdCBzcGxpdCBpbiB0d28gYnkgY2h1bmtpbmcgdGhlIGZpbGVcblx0XHRcdHZhciBhZ2dyZWdhdGUgPSB0aGlzLl9wYXJ0aWFsTGluZSArIGNodW5rO1xuXHRcdFx0dGhpcy5fcGFydGlhbExpbmUgPSAnJztcblxuXHRcdFx0dmFyIHJlc3VsdHMgPSB0aGlzLl9oYW5kbGUucGFyc2UoYWdncmVnYXRlLCB0aGlzLl9iYXNlSW5kZXgsICF0aGlzLl9maW5pc2hlZCk7XG5cblx0XHRcdGlmICh0aGlzLl9oYW5kbGUucGF1c2VkKCkgfHwgdGhpcy5faGFuZGxlLmFib3J0ZWQoKSlcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR2YXIgbGFzdEluZGV4ID0gcmVzdWx0cy5tZXRhLmN1cnNvcjtcblxuXHRcdFx0aWYgKCF0aGlzLl9maW5pc2hlZClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5fcGFydGlhbExpbmUgPSBhZ2dyZWdhdGUuc3Vic3RyaW5nKGxhc3RJbmRleCAtIHRoaXMuX2Jhc2VJbmRleCk7XG5cdFx0XHRcdHRoaXMuX2Jhc2VJbmRleCA9IGxhc3RJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHJlc3VsdHMgJiYgcmVzdWx0cy5kYXRhKVxuXHRcdFx0XHR0aGlzLl9yb3dDb3VudCArPSByZXN1bHRzLmRhdGEubGVuZ3RoO1xuXG5cdFx0XHR2YXIgZmluaXNoZWRJbmNsdWRpbmdQcmV2aWV3ID0gdGhpcy5fZmluaXNoZWQgfHwgKHRoaXMuX2NvbmZpZy5wcmV2aWV3ICYmIHRoaXMuX3Jvd0NvdW50ID49IHRoaXMuX2NvbmZpZy5wcmV2aWV3KTtcblxuXHRcdFx0aWYgKElTX1BBUEFfV09SS0VSKVxuXHRcdFx0e1xuXHRcdFx0XHRnbG9iYWwucG9zdE1lc3NhZ2Uoe1xuXHRcdFx0XHRcdHJlc3VsdHM6IHJlc3VsdHMsXG5cdFx0XHRcdFx0d29ya2VySWQ6IFBhcGEuV09SS0VSX0lELFxuXHRcdFx0XHRcdGZpbmlzaGVkOiBmaW5pc2hlZEluY2x1ZGluZ1ByZXZpZXdcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2NvbmZpZy5jaHVuaykpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuX2NvbmZpZy5jaHVuayhyZXN1bHRzLCB0aGlzLl9oYW5kbGUpO1xuXHRcdFx0XHRpZiAodGhpcy5fcGF1c2VkKVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0cmVzdWx0cyA9IHVuZGVmaW5lZDtcblx0XHRcdFx0dGhpcy5fY29tcGxldGVSZXN1bHRzID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMuX2NvbmZpZy5zdGVwICYmICF0aGlzLl9jb25maWcuY2h1bmspIHtcblx0XHRcdFx0dGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGEgPSB0aGlzLl9jb21wbGV0ZVJlc3VsdHMuZGF0YS5jb25jYXQocmVzdWx0cy5kYXRhKTtcblx0XHRcdFx0dGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycyA9IHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5lcnJvcnMuY29uY2F0KHJlc3VsdHMuZXJyb3JzKTtcblx0XHRcdFx0dGhpcy5fY29tcGxldGVSZXN1bHRzLm1ldGEgPSByZXN1bHRzLm1ldGE7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmaW5pc2hlZEluY2x1ZGluZ1ByZXZpZXcgJiYgaXNGdW5jdGlvbih0aGlzLl9jb25maWcuY29tcGxldGUpICYmICghcmVzdWx0cyB8fCAhcmVzdWx0cy5tZXRhLmFib3J0ZWQpKVxuXHRcdFx0XHR0aGlzLl9jb25maWcuY29tcGxldGUodGhpcy5fY29tcGxldGVSZXN1bHRzLCB0aGlzLl9pbnB1dCk7XG5cblx0XHRcdGlmICghZmluaXNoZWRJbmNsdWRpbmdQcmV2aWV3ICYmICghcmVzdWx0cyB8fCAhcmVzdWx0cy5tZXRhLnBhdXNlZCkpXG5cdFx0XHRcdHRoaXMuX25leHRDaHVuaygpO1xuXG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdFx0dGhpcy5fc2VuZEVycm9yID0gZnVuY3Rpb24oZXJyb3IpXG5cdFx0e1xuXHRcdFx0aWYgKGlzRnVuY3Rpb24odGhpcy5fY29uZmlnLmVycm9yKSlcblx0XHRcdFx0dGhpcy5fY29uZmlnLmVycm9yKGVycm9yKTtcblx0XHRcdGVsc2UgaWYgKElTX1BBUEFfV09SS0VSICYmIHRoaXMuX2NvbmZpZy5lcnJvcilcblx0XHRcdHtcblx0XHRcdFx0Z2xvYmFsLnBvc3RNZXNzYWdlKHtcblx0XHRcdFx0XHR3b3JrZXJJZDogUGFwYS5XT1JLRVJfSUQsXG5cdFx0XHRcdFx0ZXJyb3I6IGVycm9yLFxuXHRcdFx0XHRcdGZpbmlzaGVkOiBmYWxzZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gcmVwbGFjZUNvbmZpZyhjb25maWcpXG5cdFx0e1xuXHRcdFx0Ly8gRGVlcC1jb3B5IHRoZSBjb25maWcgc28gd2UgY2FuIGVkaXQgaXRcblx0XHRcdHZhciBjb25maWdDb3B5ID0gY29weShjb25maWcpO1xuXHRcdFx0Y29uZmlnQ29weS5jaHVua1NpemUgPSBwYXJzZUludChjb25maWdDb3B5LmNodW5rU2l6ZSk7XHQvLyBwYXJzZUludCBWRVJZIGltcG9ydGFudCBzbyB3ZSBkb24ndCBjb25jYXRlbmF0ZSBzdHJpbmdzIVxuXHRcdFx0aWYgKCFjb25maWcuc3RlcCAmJiAhY29uZmlnLmNodW5rKVxuXHRcdFx0XHRjb25maWdDb3B5LmNodW5rU2l6ZSA9IG51bGw7ICAvLyBkaXNhYmxlIFJhbmdlIGhlYWRlciBpZiBub3Qgc3RyZWFtaW5nOyBiYWQgdmFsdWVzIGJyZWFrIElJUyAtIHNlZSBpc3N1ZSAjMTk2XG5cdFx0XHR0aGlzLl9oYW5kbGUgPSBuZXcgUGFyc2VySGFuZGxlKGNvbmZpZ0NvcHkpO1xuXHRcdFx0dGhpcy5faGFuZGxlLnN0cmVhbWVyID0gdGhpcztcblx0XHRcdHRoaXMuX2NvbmZpZyA9IGNvbmZpZ0NvcHk7XHQvLyBwZXJzaXN0IHRoZSBjb3B5IHRvIHRoZSBjYWxsZXJcblx0XHR9XG5cdH1cblxuXG5cdGZ1bmN0aW9uIE5ldHdvcmtTdHJlYW1lcihjb25maWcpXG5cdHtcblx0XHRjb25maWcgPSBjb25maWcgfHwge307XG5cdFx0aWYgKCFjb25maWcuY2h1bmtTaXplKVxuXHRcdFx0Y29uZmlnLmNodW5rU2l6ZSA9IFBhcGEuUmVtb3RlQ2h1bmtTaXplO1xuXHRcdENodW5rU3RyZWFtZXIuY2FsbCh0aGlzLCBjb25maWcpO1xuXG5cdFx0dmFyIHhocjtcblxuXHRcdGlmIChJU19XT1JLRVIpXG5cdFx0e1xuXHRcdFx0dGhpcy5fbmV4dENodW5rID0gZnVuY3Rpb24oKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLl9yZWFkQ2h1bmsoKTtcblx0XHRcdFx0dGhpcy5fY2h1bmtMb2FkZWQoKTtcblx0XHRcdH07XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR0aGlzLl9uZXh0Q2h1bmsgPSBmdW5jdGlvbigpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuX3JlYWRDaHVuaygpO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHR0aGlzLnN0cmVhbSA9IGZ1bmN0aW9uKHVybClcblx0XHR7XG5cdFx0XHR0aGlzLl9pbnB1dCA9IHVybDtcblx0XHRcdHRoaXMuX25leHRDaHVuaygpO1x0Ly8gU3RhcnRzIHN0cmVhbWluZ1xuXHRcdH07XG5cblx0XHR0aGlzLl9yZWFkQ2h1bmsgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0aWYgKHRoaXMuX2ZpbmlzaGVkKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLl9jaHVua0xvYWRlZCgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG5cdFx0XHRpZiAodGhpcy5fY29uZmlnLndpdGhDcmVkZW50aWFscylcblx0XHRcdHtcblx0XHRcdFx0eGhyLndpdGhDcmVkZW50aWFscyA9IHRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghSVNfV09SS0VSKVxuXHRcdFx0e1xuXHRcdFx0XHR4aHIub25sb2FkID0gYmluZEZ1bmN0aW9uKHRoaXMuX2NodW5rTG9hZGVkLCB0aGlzKTtcblx0XHRcdFx0eGhyLm9uZXJyb3IgPSBiaW5kRnVuY3Rpb24odGhpcy5fY2h1bmtFcnJvciwgdGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdHhoci5vcGVuKCdHRVQnLCB0aGlzLl9pbnB1dCwgIUlTX1dPUktFUik7XG5cdFx0XHQvLyBIZWFkZXJzIGNhbiBvbmx5IGJlIHNldCB3aGVuIG9uY2UgdGhlIHJlcXVlc3Qgc3RhdGUgaXMgT1BFTkVEXG5cdFx0XHRpZiAodGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnMpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBoZWFkZXJzID0gdGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnM7XG5cblx0XHRcdFx0Zm9yICh2YXIgaGVhZGVyTmFtZSBpbiBoZWFkZXJzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyTmFtZSwgaGVhZGVyc1toZWFkZXJOYW1lXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBlbmQgPSB0aGlzLl9zdGFydCArIHRoaXMuX2NvbmZpZy5jaHVua1NpemUgLSAxO1x0Ly8gbWludXMgb25lIGJlY2F1c2UgYnl0ZSByYW5nZSBpcyBpbmNsdXNpdmVcblx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoJ1JhbmdlJywgJ2J5dGVzPScrdGhpcy5fc3RhcnQrJy0nK2VuZCk7XG5cdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdJZi1Ob25lLU1hdGNoJywgJ3dlYmtpdC1uby1jYWNoZScpOyAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODI2NzJcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0eGhyLnNlbmQoKTtcblx0XHRcdH1cblx0XHRcdGNhdGNoIChlcnIpIHtcblx0XHRcdFx0dGhpcy5fY2h1bmtFcnJvcihlcnIubWVzc2FnZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChJU19XT1JLRVIgJiYgeGhyLnN0YXR1cyA9PT0gMClcblx0XHRcdFx0dGhpcy5fY2h1bmtFcnJvcigpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aGlzLl9zdGFydCArPSB0aGlzLl9jb25maWcuY2h1bmtTaXplO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NodW5rTG9hZGVkID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPSA0KVxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdGlmICh4aHIuc3RhdHVzIDwgMjAwIHx8IHhoci5zdGF0dXMgPj0gNDAwKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLl9jaHVua0Vycm9yKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fZmluaXNoZWQgPSAhdGhpcy5fY29uZmlnLmNodW5rU2l6ZSB8fCB0aGlzLl9zdGFydCA+IGdldEZpbGVTaXplKHhocik7XG5cdFx0XHR0aGlzLnBhcnNlQ2h1bmsoeGhyLnJlc3BvbnNlVGV4dCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fY2h1bmtFcnJvciA9IGZ1bmN0aW9uKGVycm9yTWVzc2FnZSlcblx0XHR7XG5cdFx0XHR2YXIgZXJyb3JUZXh0ID0geGhyLnN0YXR1c1RleHQgfHwgZXJyb3JNZXNzYWdlO1xuXHRcdFx0dGhpcy5fc2VuZEVycm9yKGVycm9yVGV4dCk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0RmlsZVNpemUoeGhyKVxuXHRcdHtcblx0XHRcdHZhciBjb250ZW50UmFuZ2UgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtUmFuZ2UnKTtcblx0XHRcdGlmIChjb250ZW50UmFuZ2UgPT09IG51bGwpIHsgLy8gbm8gY29udGVudCByYW5nZSwgdGhlbiBmaW5pc2ghXG5cdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdHJldHVybiBwYXJzZUludChjb250ZW50UmFuZ2Uuc3Vic3RyKGNvbnRlbnRSYW5nZS5sYXN0SW5kZXhPZignLycpICsgMSkpO1xuXHRcdH1cblx0fVxuXHROZXR3b3JrU3RyZWFtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDaHVua1N0cmVhbWVyLnByb3RvdHlwZSk7XG5cdE5ldHdvcmtTdHJlYW1lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBOZXR3b3JrU3RyZWFtZXI7XG5cblxuXHRmdW5jdGlvbiBGaWxlU3RyZWFtZXIoY29uZmlnKVxuXHR7XG5cdFx0Y29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHRcdGlmICghY29uZmlnLmNodW5rU2l6ZSlcblx0XHRcdGNvbmZpZy5jaHVua1NpemUgPSBQYXBhLkxvY2FsQ2h1bmtTaXplO1xuXHRcdENodW5rU3RyZWFtZXIuY2FsbCh0aGlzLCBjb25maWcpO1xuXG5cdFx0dmFyIHJlYWRlciwgc2xpY2U7XG5cblx0XHQvLyBGaWxlUmVhZGVyIGlzIGJldHRlciB0aGFuIEZpbGVSZWFkZXJTeW5jIChldmVuIGluIHdvcmtlcikgLSBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMjQ3MDg2NDkvMTA0ODg2MlxuXHRcdC8vIEJ1dCBGaXJlZm94IGlzIGEgcGlsbCwgdG9vIC0gc2VlIGlzc3VlICM3NjogaHR0cHM6Ly9naXRodWIuY29tL21ob2x0L1BhcGFQYXJzZS9pc3N1ZXMvNzZcblx0XHR2YXIgdXNpbmdBc3luY1JlYWRlciA9IHR5cGVvZiBGaWxlUmVhZGVyICE9PSAndW5kZWZpbmVkJztcdC8vIFNhZmFyaSBkb2Vzbid0IGNvbnNpZGVyIGl0IGEgZnVuY3Rpb24gLSBzZWUgaXNzdWUgIzEwNVxuXG5cdFx0dGhpcy5zdHJlYW0gPSBmdW5jdGlvbihmaWxlKVxuXHRcdHtcblx0XHRcdHRoaXMuX2lucHV0ID0gZmlsZTtcblx0XHRcdHNsaWNlID0gZmlsZS5zbGljZSB8fCBmaWxlLndlYmtpdFNsaWNlIHx8IGZpbGUubW96U2xpY2U7XG5cblx0XHRcdGlmICh1c2luZ0FzeW5jUmVhZGVyKVxuXHRcdFx0e1xuXHRcdFx0XHRyZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1x0XHQvLyBQcmVmZXJyZWQgbWV0aG9kIG9mIHJlYWRpbmcgZmlsZXMsIGV2ZW4gaW4gd29ya2Vyc1xuXHRcdFx0XHRyZWFkZXIub25sb2FkID0gYmluZEZ1bmN0aW9uKHRoaXMuX2NodW5rTG9hZGVkLCB0aGlzKTtcblx0XHRcdFx0cmVhZGVyLm9uZXJyb3IgPSBiaW5kRnVuY3Rpb24odGhpcy5fY2h1bmtFcnJvciwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyU3luYygpO1x0Ly8gSGFjayBmb3IgcnVubmluZyBpbiBhIHdlYiB3b3JrZXIgaW4gRmlyZWZveFxuXG5cdFx0XHR0aGlzLl9uZXh0Q2h1bmsoKTtcdC8vIFN0YXJ0cyBzdHJlYW1pbmdcblx0XHR9O1xuXG5cdFx0dGhpcy5fbmV4dENodW5rID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdGlmICghdGhpcy5fZmluaXNoZWQgJiYgKCF0aGlzLl9jb25maWcucHJldmlldyB8fCB0aGlzLl9yb3dDb3VudCA8IHRoaXMuX2NvbmZpZy5wcmV2aWV3KSlcblx0XHRcdFx0dGhpcy5fcmVhZENodW5rKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcmVhZENodW5rID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdHZhciBpbnB1dCA9IHRoaXMuX2lucHV0O1xuXHRcdFx0aWYgKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBlbmQgPSBNYXRoLm1pbih0aGlzLl9zdGFydCArIHRoaXMuX2NvbmZpZy5jaHVua1NpemUsIHRoaXMuX2lucHV0LnNpemUpO1xuXHRcdFx0XHRpbnB1dCA9IHNsaWNlLmNhbGwoaW5wdXQsIHRoaXMuX3N0YXJ0LCBlbmQpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHR4dCA9IHJlYWRlci5yZWFkQXNUZXh0KGlucHV0LCB0aGlzLl9jb25maWcuZW5jb2RpbmcpO1xuXHRcdFx0aWYgKCF1c2luZ0FzeW5jUmVhZGVyKVxuXHRcdFx0XHR0aGlzLl9jaHVua0xvYWRlZCh7IHRhcmdldDogeyByZXN1bHQ6IHR4dCB9IH0pO1x0Ly8gbWltaWMgdGhlIGFzeW5jIHNpZ25hdHVyZVxuXHRcdH1cblxuXHRcdHRoaXMuX2NodW5rTG9hZGVkID0gZnVuY3Rpb24oZXZlbnQpXG5cdFx0e1xuXHRcdFx0Ly8gVmVyeSBpbXBvcnRhbnQgdG8gaW5jcmVtZW50IHN0YXJ0IGVhY2ggdGltZSBiZWZvcmUgaGFuZGxpbmcgcmVzdWx0c1xuXHRcdFx0dGhpcy5fc3RhcnQgKz0gdGhpcy5fY29uZmlnLmNodW5rU2l6ZTtcblx0XHRcdHRoaXMuX2ZpbmlzaGVkID0gIXRoaXMuX2NvbmZpZy5jaHVua1NpemUgfHwgdGhpcy5fc3RhcnQgPj0gdGhpcy5faW5wdXQuc2l6ZTtcblx0XHRcdHRoaXMucGFyc2VDaHVuayhldmVudC50YXJnZXQucmVzdWx0KTtcblx0XHR9XG5cblx0XHR0aGlzLl9jaHVua0Vycm9yID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdHRoaXMuX3NlbmRFcnJvcihyZWFkZXIuZXJyb3IubWVzc2FnZSk7XG5cdFx0fVxuXG5cdH1cblx0RmlsZVN0cmVhbWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2h1bmtTdHJlYW1lci5wcm90b3R5cGUpO1xuXHRGaWxlU3RyZWFtZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmlsZVN0cmVhbWVyO1xuXG5cblx0ZnVuY3Rpb24gU3RyaW5nU3RyZWFtZXIoY29uZmlnKVxuXHR7XG5cdFx0Y29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHRcdENodW5rU3RyZWFtZXIuY2FsbCh0aGlzLCBjb25maWcpO1xuXG5cdFx0dmFyIHN0cmluZztcblx0XHR2YXIgcmVtYWluaW5nO1xuXHRcdHRoaXMuc3RyZWFtID0gZnVuY3Rpb24ocylcblx0XHR7XG5cdFx0XHRzdHJpbmcgPSBzO1xuXHRcdFx0cmVtYWluaW5nID0gcztcblx0XHRcdHJldHVybiB0aGlzLl9uZXh0Q2h1bmsoKTtcblx0XHR9XG5cdFx0dGhpcy5fbmV4dENodW5rID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLl9maW5pc2hlZCkgcmV0dXJuO1xuXHRcdFx0dmFyIHNpemUgPSB0aGlzLl9jb25maWcuY2h1bmtTaXplO1xuXHRcdFx0dmFyIGNodW5rID0gc2l6ZSA/IHJlbWFpbmluZy5zdWJzdHIoMCwgc2l6ZSkgOiByZW1haW5pbmc7XG5cdFx0XHRyZW1haW5pbmcgPSBzaXplID8gcmVtYWluaW5nLnN1YnN0cihzaXplKSA6ICcnO1xuXHRcdFx0dGhpcy5fZmluaXNoZWQgPSAhcmVtYWluaW5nO1xuXHRcdFx0cmV0dXJuIHRoaXMucGFyc2VDaHVuayhjaHVuayk7XG5cdFx0fVxuXHR9XG5cdFN0cmluZ1N0cmVhbWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3RyaW5nU3RyZWFtZXIucHJvdG90eXBlKTtcblx0U3RyaW5nU3RyZWFtZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3RyaW5nU3RyZWFtZXI7XG5cblxuXHRmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbVN0cmVhbWVyKGNvbmZpZylcblx0e1xuXHRcdGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuXHRcdENodW5rU3RyZWFtZXIuY2FsbCh0aGlzLCBjb25maWcpO1xuXG5cdFx0dmFyIHF1ZXVlID0gW107XG5cdFx0dmFyIHBhcnNlT25EYXRhID0gdHJ1ZTtcblxuXHRcdHRoaXMuc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKVxuXHRcdHtcblx0XHRcdHRoaXMuX2lucHV0ID0gc3RyZWFtO1xuXG5cdFx0XHR0aGlzLl9pbnB1dC5vbignZGF0YScsIHRoaXMuX3N0cmVhbURhdGEpO1xuXHRcdFx0dGhpcy5faW5wdXQub24oJ2VuZCcsIHRoaXMuX3N0cmVhbUVuZCk7XG5cdFx0XHR0aGlzLl9pbnB1dC5vbignZXJyb3InLCB0aGlzLl9zdHJlYW1FcnJvcik7XG5cdFx0fVxuXG5cdFx0dGhpcy5fbmV4dENodW5rID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdGlmIChxdWV1ZS5sZW5ndGgpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMucGFyc2VDaHVuayhxdWV1ZS5zaGlmdCgpKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0cGFyc2VPbkRhdGEgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuX3N0cmVhbURhdGEgPSBiaW5kRnVuY3Rpb24oZnVuY3Rpb24oY2h1bmspXG5cdFx0e1xuXHRcdFx0dHJ5XG5cdFx0XHR7XG5cdFx0XHRcdHF1ZXVlLnB1c2godHlwZW9mIGNodW5rID09PSAnc3RyaW5nJyA/IGNodW5rIDogY2h1bmsudG9TdHJpbmcodGhpcy5fY29uZmlnLmVuY29kaW5nKSk7XG5cblx0XHRcdFx0aWYgKHBhcnNlT25EYXRhKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cGFyc2VPbkRhdGEgPSBmYWxzZTtcblx0XHRcdFx0XHR0aGlzLnBhcnNlQ2h1bmsocXVldWUuc2hpZnQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGNhdGNoIChlcnJvcilcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5fc3RyZWFtRXJyb3IoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH0sIHRoaXMpO1xuXG5cdFx0dGhpcy5fc3RyZWFtRXJyb3IgPSBiaW5kRnVuY3Rpb24oZnVuY3Rpb24oZXJyb3IpXG5cdFx0e1xuXHRcdFx0dGhpcy5fc3RyZWFtQ2xlYW5VcCgpO1xuXHRcdFx0dGhpcy5fc2VuZEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuXHRcdH0sIHRoaXMpO1xuXG5cdFx0dGhpcy5fc3RyZWFtRW5kID0gYmluZEZ1bmN0aW9uKGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHR0aGlzLl9zdHJlYW1DbGVhblVwKCk7XG5cdFx0XHR0aGlzLl9maW5pc2hlZCA9IHRydWU7XG5cdFx0XHR0aGlzLl9zdHJlYW1EYXRhKCcnKTtcblx0XHR9LCB0aGlzKTtcblxuXHRcdHRoaXMuX3N0cmVhbUNsZWFuVXAgPSBiaW5kRnVuY3Rpb24oZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgdGhpcy5fc3RyZWFtRGF0YSk7XG5cdFx0XHR0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcignZW5kJywgdGhpcy5fc3RyZWFtRW5kKTtcblx0XHRcdHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIHRoaXMuX3N0cmVhbUVycm9yKTtcblx0XHR9LCB0aGlzKTtcblx0fVxuXHRSZWFkYWJsZVN0cmVhbVN0cmVhbWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2h1bmtTdHJlYW1lci5wcm90b3R5cGUpO1xuXHRSZWFkYWJsZVN0cmVhbVN0cmVhbWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlYWRhYmxlU3RyZWFtU3RyZWFtZXI7XG5cblxuXHQvLyBVc2Ugb25lIFBhcnNlckhhbmRsZSBwZXIgZW50aXJlIENTViBmaWxlIG9yIHN0cmluZ1xuXHRmdW5jdGlvbiBQYXJzZXJIYW5kbGUoX2NvbmZpZylcblx0e1xuXHRcdC8vIE9uZSBnb2FsIGlzIHRvIG1pbmltaXplIHRoZSB1c2Ugb2YgcmVndWxhciBleHByZXNzaW9ucy4uLlxuXHRcdHZhciBGTE9BVCA9IC9eXFxzKi0/KFxcZCpcXC4/XFxkK3xcXGQrXFwuP1xcZCopKGVbLStdP1xcZCspP1xccyokL2k7XG5cblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0dmFyIF9zdGVwQ291bnRlciA9IDA7XHQvLyBOdW1iZXIgb2YgdGltZXMgc3RlcCB3YXMgY2FsbGVkIChudW1iZXIgb2Ygcm93cyBwYXJzZWQpXG5cdFx0dmFyIF9pbnB1dDtcdFx0XHRcdC8vIFRoZSBpbnB1dCBiZWluZyBwYXJzZWRcblx0XHR2YXIgX3BhcnNlcjtcdFx0XHQvLyBUaGUgY29yZSBwYXJzZXIgYmVpbmcgdXNlZFxuXHRcdHZhciBfcGF1c2VkID0gZmFsc2U7XHQvLyBXaGV0aGVyIHdlIGFyZSBwYXVzZWQgb3Igbm90XG5cdFx0dmFyIF9hYm9ydGVkID0gZmFsc2U7XHQvLyBXaGV0aGVyIHRoZSBwYXJzZXIgaGFzIGFib3J0ZWQgb3Igbm90XG5cdFx0dmFyIF9kZWxpbWl0ZXJFcnJvcjtcdC8vIFRlbXBvcmFyeSBzdGF0ZSBiZXR3ZWVuIGRlbGltaXRlciBkZXRlY3Rpb24gYW5kIHByb2Nlc3NpbmcgcmVzdWx0c1xuXHRcdHZhciBfZmllbGRzID0gW107XHRcdC8vIEZpZWxkcyBhcmUgZnJvbSB0aGUgaGVhZGVyIHJvdyBvZiB0aGUgaW5wdXQsIGlmIHRoZXJlIGlzIG9uZVxuXHRcdHZhciBfcmVzdWx0cyA9IHtcdFx0Ly8gVGhlIGxhc3QgcmVzdWx0cyByZXR1cm5lZCBmcm9tIHRoZSBwYXJzZXJcblx0XHRcdGRhdGE6IFtdLFxuXHRcdFx0ZXJyb3JzOiBbXSxcblx0XHRcdG1ldGE6IHt9XG5cdFx0fTtcblxuXHRcdGlmIChpc0Z1bmN0aW9uKF9jb25maWcuc3RlcCkpXG5cdFx0e1xuXHRcdFx0dmFyIHVzZXJTdGVwID0gX2NvbmZpZy5zdGVwO1xuXHRcdFx0X2NvbmZpZy5zdGVwID0gZnVuY3Rpb24ocmVzdWx0cylcblx0XHRcdHtcblx0XHRcdFx0X3Jlc3VsdHMgPSByZXN1bHRzO1xuXG5cdFx0XHRcdGlmIChuZWVkc0hlYWRlclJvdygpKVxuXHRcdFx0XHRcdHByb2Nlc3NSZXN1bHRzKCk7XG5cdFx0XHRcdGVsc2VcdC8vIG9ubHkgY2FsbCB1c2VyJ3Mgc3RlcCBmdW5jdGlvbiBhZnRlciBoZWFkZXIgcm93XG5cdFx0XHRcdHtcblx0XHRcdFx0XHRwcm9jZXNzUmVzdWx0cygpO1xuXG5cdFx0XHRcdFx0Ly8gSXQncyBwb3NzYmlsZSB0aGF0IHRoaXMgbGluZSB3YXMgZW1wdHkgYW5kIHRoZXJlJ3Mgbm8gcm93IGhlcmUgYWZ0ZXIgYWxsXG5cdFx0XHRcdFx0aWYgKF9yZXN1bHRzLmRhdGEubGVuZ3RoID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0X3N0ZXBDb3VudGVyICs9IHJlc3VsdHMuZGF0YS5sZW5ndGg7XG5cdFx0XHRcdFx0aWYgKF9jb25maWcucHJldmlldyAmJiBfc3RlcENvdW50ZXIgPiBfY29uZmlnLnByZXZpZXcpXG5cdFx0XHRcdFx0XHRfcGFyc2VyLmFib3J0KCk7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0dXNlclN0ZXAoX3Jlc3VsdHMsIHNlbGYpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFBhcnNlcyBpbnB1dC4gTW9zdCB1c2VycyB3b24ndCBuZWVkLCBhbmQgc2hvdWxkbid0IG1lc3Mgd2l0aCwgdGhlIGJhc2VJbmRleFxuXHRcdCAqIGFuZCBpZ25vcmVMYXN0Um93IHBhcmFtZXRlcnMuIFRoZXkgYXJlIHVzZWQgYnkgc3RyZWFtZXJzICh3cmFwcGVyIGZ1bmN0aW9ucylcblx0XHQgKiB3aGVuIGFuIGlucHV0IGNvbWVzIGluIG11bHRpcGxlIGNodW5rcywgbGlrZSBmcm9tIGEgZmlsZS5cblx0XHQgKi9cblx0XHR0aGlzLnBhcnNlID0gZnVuY3Rpb24oaW5wdXQsIGJhc2VJbmRleCwgaWdub3JlTGFzdFJvdylcblx0XHR7XG5cdFx0XHRpZiAoIV9jb25maWcubmV3bGluZSlcblx0XHRcdFx0X2NvbmZpZy5uZXdsaW5lID0gZ3Vlc3NMaW5lRW5kaW5ncyhpbnB1dCk7XG5cblx0XHRcdF9kZWxpbWl0ZXJFcnJvciA9IGZhbHNlO1xuXHRcdFx0aWYgKCFfY29uZmlnLmRlbGltaXRlcilcblx0XHRcdHtcblx0XHRcdFx0dmFyIGRlbGltR3Vlc3MgPSBndWVzc0RlbGltaXRlcihpbnB1dCwgX2NvbmZpZy5uZXdsaW5lLCBfY29uZmlnLnNraXBFbXB0eUxpbmVzKTtcblx0XHRcdFx0aWYgKGRlbGltR3Vlc3Muc3VjY2Vzc2Z1bClcblx0XHRcdFx0XHRfY29uZmlnLmRlbGltaXRlciA9IGRlbGltR3Vlc3MuYmVzdERlbGltaXRlcjtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0X2RlbGltaXRlckVycm9yID0gdHJ1ZTtcdC8vIGFkZCBlcnJvciBhZnRlciBwYXJzaW5nIChvdGhlcndpc2UgaXQgd291bGQgYmUgb3ZlcndyaXR0ZW4pXG5cdFx0XHRcdFx0X2NvbmZpZy5kZWxpbWl0ZXIgPSBQYXBhLkRlZmF1bHREZWxpbWl0ZXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3Jlc3VsdHMubWV0YS5kZWxpbWl0ZXIgPSBfY29uZmlnLmRlbGltaXRlcjtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoaXNGdW5jdGlvbihfY29uZmlnLmRlbGltaXRlcikpXG5cdFx0XHR7XG5cdFx0XHRcdF9jb25maWcuZGVsaW1pdGVyID0gX2NvbmZpZy5kZWxpbWl0ZXIoaW5wdXQpO1xuXHRcdFx0XHRfcmVzdWx0cy5tZXRhLmRlbGltaXRlciA9IF9jb25maWcuZGVsaW1pdGVyO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcGFyc2VyQ29uZmlnID0gY29weShfY29uZmlnKTtcblx0XHRcdGlmIChfY29uZmlnLnByZXZpZXcgJiYgX2NvbmZpZy5oZWFkZXIpXG5cdFx0XHRcdHBhcnNlckNvbmZpZy5wcmV2aWV3Kys7XHQvLyB0byBjb21wZW5zYXRlIGZvciBoZWFkZXIgcm93XG5cblx0XHRcdF9pbnB1dCA9IGlucHV0O1xuXHRcdFx0X3BhcnNlciA9IG5ldyBQYXJzZXIocGFyc2VyQ29uZmlnKTtcblx0XHRcdF9yZXN1bHRzID0gX3BhcnNlci5wYXJzZShfaW5wdXQsIGJhc2VJbmRleCwgaWdub3JlTGFzdFJvdyk7XG5cdFx0XHRwcm9jZXNzUmVzdWx0cygpO1xuXHRcdFx0cmV0dXJuIF9wYXVzZWQgPyB7IG1ldGE6IHsgcGF1c2VkOiB0cnVlIH0gfSA6IChfcmVzdWx0cyB8fCB7IG1ldGE6IHsgcGF1c2VkOiBmYWxzZSB9IH0pO1xuXHRcdH07XG5cblx0XHR0aGlzLnBhdXNlZCA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRyZXR1cm4gX3BhdXNlZDtcblx0XHR9O1xuXG5cdFx0dGhpcy5wYXVzZSA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRfcGF1c2VkID0gdHJ1ZTtcblx0XHRcdF9wYXJzZXIuYWJvcnQoKTtcblx0XHRcdF9pbnB1dCA9IF9pbnB1dC5zdWJzdHIoX3BhcnNlci5nZXRDaGFySW5kZXgoKSk7XG5cdFx0fTtcblxuXHRcdHRoaXMucmVzdW1lID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdF9wYXVzZWQgPSBmYWxzZTtcblx0XHRcdHNlbGYuc3RyZWFtZXIucGFyc2VDaHVuayhfaW5wdXQpO1xuXHRcdH07XG5cblx0XHR0aGlzLmFib3J0ZWQgPSBmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdHJldHVybiBfYWJvcnRlZDtcblx0XHR9O1xuXG5cdFx0dGhpcy5hYm9ydCA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRfYWJvcnRlZCA9IHRydWU7XG5cdFx0XHRfcGFyc2VyLmFib3J0KCk7XG5cdFx0XHRfcmVzdWx0cy5tZXRhLmFib3J0ZWQgPSB0cnVlO1xuXHRcdFx0aWYgKGlzRnVuY3Rpb24oX2NvbmZpZy5jb21wbGV0ZSkpXG5cdFx0XHRcdF9jb25maWcuY29tcGxldGUoX3Jlc3VsdHMpO1xuXHRcdFx0X2lucHV0ID0gJyc7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHByb2Nlc3NSZXN1bHRzKClcblx0XHR7XG5cdFx0XHRpZiAoX3Jlc3VsdHMgJiYgX2RlbGltaXRlckVycm9yKVxuXHRcdFx0e1xuXHRcdFx0XHRhZGRFcnJvcignRGVsaW1pdGVyJywgJ1VuZGV0ZWN0YWJsZURlbGltaXRlcicsICdVbmFibGUgdG8gYXV0by1kZXRlY3QgZGVsaW1pdGluZyBjaGFyYWN0ZXI7IGRlZmF1bHRlZCB0byBcXCcnK1BhcGEuRGVmYXVsdERlbGltaXRlcisnXFwnJyk7XG5cdFx0XHRcdF9kZWxpbWl0ZXJFcnJvciA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX2NvbmZpZy5za2lwRW1wdHlMaW5lcylcblx0XHRcdHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBfcmVzdWx0cy5kYXRhLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdGlmIChfcmVzdWx0cy5kYXRhW2ldLmxlbmd0aCA9PT0gMSAmJiBfcmVzdWx0cy5kYXRhW2ldWzBdID09PSAnJylcblx0XHRcdFx0XHRcdF9yZXN1bHRzLmRhdGEuc3BsaWNlKGktLSwgMSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChuZWVkc0hlYWRlclJvdygpKVxuXHRcdFx0XHRmaWxsSGVhZGVyRmllbGRzKCk7XG5cblx0XHRcdHJldHVybiBhcHBseUhlYWRlckFuZER5bmFtaWNUeXBpbmcoKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBuZWVkc0hlYWRlclJvdygpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIF9jb25maWcuaGVhZGVyICYmIF9maWVsZHMubGVuZ3RoID09PSAwO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGZpbGxIZWFkZXJGaWVsZHMoKVxuXHRcdHtcblx0XHRcdGlmICghX3Jlc3VsdHMpXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBuZWVkc0hlYWRlclJvdygpICYmIGkgPCBfcmVzdWx0cy5kYXRhLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IF9yZXN1bHRzLmRhdGFbaV0ubGVuZ3RoOyBqKyspXG5cdFx0XHRcdFx0X2ZpZWxkcy5wdXNoKF9yZXN1bHRzLmRhdGFbaV1bal0pO1xuXHRcdFx0X3Jlc3VsdHMuZGF0YS5zcGxpY2UoMCwgMSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2hvdWxkQXBwbHlEeW5hbWljVHlwaW5nKGZpZWxkKSB7XG5cdFx0XHQvLyBDYWNoZSBmdW5jdGlvbiB2YWx1ZXMgdG8gYXZvaWQgY2FsbGluZyBpdCBmb3IgZWFjaCByb3dcblx0XHRcdGlmIChfY29uZmlnLmR5bmFtaWNUeXBpbmdGdW5jdGlvbiAmJiBfY29uZmlnLmR5bmFtaWNUeXBpbmdbZmllbGRdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0X2NvbmZpZy5keW5hbWljVHlwaW5nW2ZpZWxkXSA9IF9jb25maWcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uKGZpZWxkKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAoX2NvbmZpZy5keW5hbWljVHlwaW5nW2ZpZWxkXSB8fCBfY29uZmlnLmR5bmFtaWNUeXBpbmcpID09PSB0cnVlXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcGFyc2VEeW5hbWljKGZpZWxkLCB2YWx1ZSlcblx0XHR7XG5cdFx0XHRpZiAoc2hvdWxkQXBwbHlEeW5hbWljVHlwaW5nKGZpZWxkKSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09ICdUUlVFJylcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0ZWxzZSBpZiAodmFsdWUgPT09ICdmYWxzZScgfHwgdmFsdWUgPT09ICdGQUxTRScpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0cmV0dXJuIHRyeVBhcnNlRmxvYXQodmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFwcGx5SGVhZGVyQW5kRHluYW1pY1R5cGluZygpXG5cdFx0e1xuXHRcdFx0aWYgKCFfcmVzdWx0cyB8fCAoIV9jb25maWcuaGVhZGVyICYmICFfY29uZmlnLmR5bmFtaWNUeXBpbmcpKVxuXHRcdFx0XHRyZXR1cm4gX3Jlc3VsdHM7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgX3Jlc3VsdHMuZGF0YS5sZW5ndGg7IGkrKylcblx0XHRcdHtcblx0XHRcdFx0dmFyIHJvdyA9IF9jb25maWcuaGVhZGVyID8ge30gOiBbXTtcblxuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IF9yZXN1bHRzLmRhdGFbaV0ubGVuZ3RoOyBqKyspXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgZmllbGQgPSBqO1xuXHRcdFx0XHRcdHZhciB2YWx1ZSA9IF9yZXN1bHRzLmRhdGFbaV1bal07XG5cblx0XHRcdFx0XHRpZiAoX2NvbmZpZy5oZWFkZXIpXG5cdFx0XHRcdFx0XHRmaWVsZCA9IGogPj0gX2ZpZWxkcy5sZW5ndGggPyAnX19wYXJzZWRfZXh0cmEnIDogX2ZpZWxkc1tqXTtcblxuXHRcdFx0XHRcdHZhbHVlID0gcGFyc2VEeW5hbWljKGZpZWxkLCB2YWx1ZSk7XG5cblx0XHRcdFx0XHRpZiAoZmllbGQgPT09ICdfX3BhcnNlZF9leHRyYScpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cm93W2ZpZWxkXSA9IHJvd1tmaWVsZF0gfHwgW107XG5cdFx0XHRcdFx0XHRyb3dbZmllbGRdLnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRyb3dbZmllbGRdID0gdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfcmVzdWx0cy5kYXRhW2ldID0gcm93O1xuXG5cdFx0XHRcdGlmIChfY29uZmlnLmhlYWRlcilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChqID4gX2ZpZWxkcy5sZW5ndGgpXG5cdFx0XHRcdFx0XHRhZGRFcnJvcignRmllbGRNaXNtYXRjaCcsICdUb29NYW55RmllbGRzJywgJ1RvbyBtYW55IGZpZWxkczogZXhwZWN0ZWQgJyArIF9maWVsZHMubGVuZ3RoICsgJyBmaWVsZHMgYnV0IHBhcnNlZCAnICsgaiwgaSk7XG5cdFx0XHRcdFx0ZWxzZSBpZiAoaiA8IF9maWVsZHMubGVuZ3RoKVxuXHRcdFx0XHRcdFx0YWRkRXJyb3IoJ0ZpZWxkTWlzbWF0Y2gnLCAnVG9vRmV3RmllbGRzJywgJ1RvbyBmZXcgZmllbGRzOiBleHBlY3RlZCAnICsgX2ZpZWxkcy5sZW5ndGggKyAnIGZpZWxkcyBidXQgcGFyc2VkICcgKyBqLCBpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX2NvbmZpZy5oZWFkZXIgJiYgX3Jlc3VsdHMubWV0YSlcblx0XHRcdFx0X3Jlc3VsdHMubWV0YS5maWVsZHMgPSBfZmllbGRzO1xuXHRcdFx0cmV0dXJuIF9yZXN1bHRzO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGd1ZXNzRGVsaW1pdGVyKGlucHV0LCBuZXdsaW5lLCBza2lwRW1wdHlMaW5lcylcblx0XHR7XG5cdFx0XHR2YXIgZGVsaW1DaG9pY2VzID0gWycsJywgJ1xcdCcsICd8JywgJzsnLCBQYXBhLlJFQ09SRF9TRVAsIFBhcGEuVU5JVF9TRVBdO1xuXHRcdFx0dmFyIGJlc3REZWxpbSwgYmVzdERlbHRhLCBmaWVsZENvdW50UHJldlJvdztcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWxpbUNob2ljZXMubGVuZ3RoOyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBkZWxpbSA9IGRlbGltQ2hvaWNlc1tpXTtcblx0XHRcdFx0dmFyIGRlbHRhID0gMCwgYXZnRmllbGRDb3VudCA9IDAsIGVtcHR5TGluZXNDb3VudCA9IDA7XG5cdFx0XHRcdGZpZWxkQ291bnRQcmV2Um93ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdHZhciBwcmV2aWV3ID0gbmV3IFBhcnNlcih7XG5cdFx0XHRcdFx0ZGVsaW1pdGVyOiBkZWxpbSxcblx0XHRcdFx0XHRuZXdsaW5lOiBuZXdsaW5lLFxuXHRcdFx0XHRcdHByZXZpZXc6IDEwXG5cdFx0XHRcdH0pLnBhcnNlKGlucHV0KTtcblxuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHByZXZpZXcuZGF0YS5sZW5ndGg7IGorKylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChza2lwRW1wdHlMaW5lcyAmJiBwcmV2aWV3LmRhdGFbal0ubGVuZ3RoID09PSAxICYmIHByZXZpZXcuZGF0YVtqXVswXS5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRcdGVtcHR5TGluZXNDb3VudCsrXG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgZmllbGRDb3VudCA9IHByZXZpZXcuZGF0YVtqXS5sZW5ndGg7XG5cdFx0XHRcdFx0YXZnRmllbGRDb3VudCArPSBmaWVsZENvdW50O1xuXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBmaWVsZENvdW50UHJldlJvdyA9PT0gJ3VuZGVmaW5lZCcpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0ZmllbGRDb3VudFByZXZSb3cgPSBmaWVsZENvdW50O1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKGZpZWxkQ291bnQgPiAxKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRlbHRhICs9IE1hdGguYWJzKGZpZWxkQ291bnQgLSBmaWVsZENvdW50UHJldlJvdyk7XG5cdFx0XHRcdFx0XHRmaWVsZENvdW50UHJldlJvdyA9IGZpZWxkQ291bnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHByZXZpZXcuZGF0YS5sZW5ndGggPiAwKVxuXHRcdFx0XHRcdGF2Z0ZpZWxkQ291bnQgLz0gKHByZXZpZXcuZGF0YS5sZW5ndGggLSBlbXB0eUxpbmVzQ291bnQpO1xuXG5cdFx0XHRcdGlmICgodHlwZW9mIGJlc3REZWx0YSA9PT0gJ3VuZGVmaW5lZCcgfHwgZGVsdGEgPCBiZXN0RGVsdGEpXG5cdFx0XHRcdFx0JiYgYXZnRmllbGRDb3VudCA+IDEuOTkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRiZXN0RGVsdGEgPSBkZWx0YTtcblx0XHRcdFx0XHRiZXN0RGVsaW0gPSBkZWxpbTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRfY29uZmlnLmRlbGltaXRlciA9IGJlc3REZWxpbTtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c3VjY2Vzc2Z1bDogISFiZXN0RGVsaW0sXG5cdFx0XHRcdGJlc3REZWxpbWl0ZXI6IGJlc3REZWxpbVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGd1ZXNzTGluZUVuZGluZ3MoaW5wdXQpXG5cdFx0e1xuXHRcdFx0aW5wdXQgPSBpbnB1dC5zdWJzdHIoMCwgMTAyNCoxMDI0KTtcdC8vIG1heCBsZW5ndGggMSBNQlxuXG5cdFx0XHR2YXIgciA9IGlucHV0LnNwbGl0KCdcXHInKTtcblxuXHRcdFx0dmFyIG4gPSBpbnB1dC5zcGxpdCgnXFxuJyk7XG5cblx0XHRcdHZhciBuQXBwZWFyc0ZpcnN0ID0gKG4ubGVuZ3RoID4gMSAmJiBuWzBdLmxlbmd0aCA8IHJbMF0ubGVuZ3RoKTtcblxuXHRcdFx0aWYgKHIubGVuZ3RoID09PSAxIHx8IG5BcHBlYXJzRmlyc3QpXG5cdFx0XHRcdHJldHVybiAnXFxuJztcblxuXHRcdFx0dmFyIG51bVdpdGhOID0gMDtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgci5sZW5ndGg7IGkrKylcblx0XHRcdHtcblx0XHRcdFx0aWYgKHJbaV1bMF0gPT09ICdcXG4nKVxuXHRcdFx0XHRcdG51bVdpdGhOKys7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBudW1XaXRoTiA+PSByLmxlbmd0aCAvIDIgPyAnXFxyXFxuJyA6ICdcXHInO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyeVBhcnNlRmxvYXQodmFsKVxuXHRcdHtcblx0XHRcdHZhciBpc051bWJlciA9IEZMT0FULnRlc3QodmFsKTtcblx0XHRcdHJldHVybiBpc051bWJlciA/IHBhcnNlRmxvYXQodmFsKSA6IHZhbDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRFcnJvcih0eXBlLCBjb2RlLCBtc2csIHJvdylcblx0XHR7XG5cdFx0XHRfcmVzdWx0cy5lcnJvcnMucHVzaCh7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGNvZGU6IGNvZGUsXG5cdFx0XHRcdG1lc3NhZ2U6IG1zZyxcblx0XHRcdFx0cm93OiByb3dcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cblxuXG5cblx0LyoqIFRoZSBjb3JlIHBhcnNlciBpbXBsZW1lbnRzIHNwZWVkeSBhbmQgY29ycmVjdCBDU1YgcGFyc2luZyAqL1xuXHRmdW5jdGlvbiBQYXJzZXIoY29uZmlnKVxuXHR7XG5cdFx0Ly8gVW5wYWNrIHRoZSBjb25maWcgb2JqZWN0XG5cdFx0Y29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHRcdHZhciBkZWxpbSA9IGNvbmZpZy5kZWxpbWl0ZXI7XG5cdFx0dmFyIG5ld2xpbmUgPSBjb25maWcubmV3bGluZTtcblx0XHR2YXIgY29tbWVudHMgPSBjb25maWcuY29tbWVudHM7XG5cdFx0dmFyIHN0ZXAgPSBjb25maWcuc3RlcDtcblx0XHR2YXIgcHJldmlldyA9IGNvbmZpZy5wcmV2aWV3O1xuXHRcdHZhciBmYXN0TW9kZSA9IGNvbmZpZy5mYXN0TW9kZTtcblx0XHQvKiogQWxsb3dzIGZvciBubyBxdW90ZUNoYXIgYnkgc2V0dGluZyBxdW90ZUNoYXIgdG8gdW5kZWZpbmVkIGluIGNvbmZpZyAqL1xuXHRcdGlmIChjb25maWcucXVvdGVDaGFyID09PSB1bmRlZmluZWQpe1xuXHRcdFx0dmFyIHF1b3RlQ2hhciA9ICdcIic7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBxdW90ZUNoYXIgPSBjb25maWcucXVvdGVDaGFyO1xuXHRcdH1cblxuXHRcdC8vIERlbGltaXRlciBtdXN0IGJlIHZhbGlkXG5cdFx0aWYgKHR5cGVvZiBkZWxpbSAhPT0gJ3N0cmluZydcblx0XHRcdHx8IFBhcGEuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihkZWxpbSkgPiAtMSlcblx0XHRcdGRlbGltID0gJywnO1xuXG5cdFx0Ly8gQ29tbWVudCBjaGFyYWN0ZXIgbXVzdCBiZSB2YWxpZFxuXHRcdGlmIChjb21tZW50cyA9PT0gZGVsaW0pXG5cdFx0XHR0aHJvdyAnQ29tbWVudCBjaGFyYWN0ZXIgc2FtZSBhcyBkZWxpbWl0ZXInO1xuXHRcdGVsc2UgaWYgKGNvbW1lbnRzID09PSB0cnVlKVxuXHRcdFx0Y29tbWVudHMgPSAnIyc7XG5cdFx0ZWxzZSBpZiAodHlwZW9mIGNvbW1lbnRzICE9PSAnc3RyaW5nJ1xuXHRcdFx0fHwgUGFwYS5CQURfREVMSU1JVEVSUy5pbmRleE9mKGNvbW1lbnRzKSA+IC0xKVxuXHRcdFx0Y29tbWVudHMgPSBmYWxzZTtcblxuXHRcdC8vIE5ld2xpbmUgbXVzdCBiZSB2YWxpZDogXFxyLCBcXG4sIG9yIFxcclxcblxuXHRcdGlmIChuZXdsaW5lICE9ICdcXG4nICYmIG5ld2xpbmUgIT0gJ1xccicgJiYgbmV3bGluZSAhPSAnXFxyXFxuJylcblx0XHRcdG5ld2xpbmUgPSAnXFxuJztcblxuXHRcdC8vIFdlJ3JlIGdvbm5hIG5lZWQgdGhlc2UgYXQgdGhlIFBhcnNlciBzY29wZVxuXHRcdHZhciBjdXJzb3IgPSAwO1xuXHRcdHZhciBhYm9ydGVkID0gZmFsc2U7XG5cblx0XHR0aGlzLnBhcnNlID0gZnVuY3Rpb24oaW5wdXQsIGJhc2VJbmRleCwgaWdub3JlTGFzdFJvdylcblx0XHR7XG5cdFx0XHQvLyBGb3Igc29tZSByZWFzb24sIGluIENocm9tZSwgdGhpcyBzcGVlZHMgdGhpbmdzIHVwICghPylcblx0XHRcdGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKVxuXHRcdFx0XHR0aHJvdyAnSW5wdXQgbXVzdCBiZSBhIHN0cmluZyc7XG5cblx0XHRcdC8vIFdlIGRvbid0IG5lZWQgdG8gY29tcHV0ZSBzb21lIG9mIHRoZXNlIGV2ZXJ5IHRpbWUgcGFyc2UoKSBpcyBjYWxsZWQsXG5cdFx0XHQvLyBidXQgaGF2aW5nIHRoZW0gaW4gYSBtb3JlIGxvY2FsIHNjb3BlIHNlZW1zIHRvIHBlcmZvcm0gYmV0dGVyXG5cdFx0XHR2YXIgaW5wdXRMZW4gPSBpbnB1dC5sZW5ndGgsXG5cdFx0XHRcdGRlbGltTGVuID0gZGVsaW0ubGVuZ3RoLFxuXHRcdFx0XHRuZXdsaW5lTGVuID0gbmV3bGluZS5sZW5ndGgsXG5cdFx0XHRcdGNvbW1lbnRzTGVuID0gY29tbWVudHMubGVuZ3RoO1xuXHRcdFx0dmFyIHN0ZXBJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbihzdGVwKTtcblxuXHRcdFx0Ly8gRXN0YWJsaXNoIHN0YXJ0aW5nIHN0YXRlXG5cdFx0XHRjdXJzb3IgPSAwO1xuXHRcdFx0dmFyIGRhdGEgPSBbXSwgZXJyb3JzID0gW10sIHJvdyA9IFtdLCBsYXN0Q3Vyc29yID0gMDtcblxuXHRcdFx0aWYgKCFpbnB1dClcblx0XHRcdFx0cmV0dXJuIHJldHVybmFibGUoKTtcblxuXHRcdFx0aWYgKGZhc3RNb2RlIHx8IChmYXN0TW9kZSAhPT0gZmFsc2UgJiYgaW5wdXQuaW5kZXhPZihxdW90ZUNoYXIpID09PSAtMSkpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciByb3dzID0gaW5wdXQuc3BsaXQobmV3bGluZSk7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciByb3cgPSByb3dzW2ldO1xuXHRcdFx0XHRcdGN1cnNvciArPSByb3cubGVuZ3RoO1xuXHRcdFx0XHRcdGlmIChpICE9PSByb3dzLmxlbmd0aCAtIDEpXG5cdFx0XHRcdFx0XHRjdXJzb3IgKz0gbmV3bGluZS5sZW5ndGg7XG5cdFx0XHRcdFx0ZWxzZSBpZiAoaWdub3JlTGFzdFJvdylcblx0XHRcdFx0XHRcdHJldHVybiByZXR1cm5hYmxlKCk7XG5cdFx0XHRcdFx0aWYgKGNvbW1lbnRzICYmIHJvdy5zdWJzdHIoMCwgY29tbWVudHNMZW4pID09PSBjb21tZW50cylcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmIChzdGVwSXNGdW5jdGlvbilcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRkYXRhID0gW107XG5cdFx0XHRcdFx0XHRwdXNoUm93KHJvdy5zcGxpdChkZWxpbSkpO1xuXHRcdFx0XHRcdFx0ZG9TdGVwKCk7XG5cdFx0XHRcdFx0XHRpZiAoYWJvcnRlZClcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJldHVybmFibGUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0cHVzaFJvdyhyb3cuc3BsaXQoZGVsaW0pKTtcblx0XHRcdFx0XHRpZiAocHJldmlldyAmJiBpID49IHByZXZpZXcpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0ZGF0YSA9IGRhdGEuc2xpY2UoMCwgcHJldmlldyk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0dXJuYWJsZSh0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJldHVybmFibGUoKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG5leHREZWxpbSA9IGlucHV0LmluZGV4T2YoZGVsaW0sIGN1cnNvcik7XG5cdFx0XHR2YXIgbmV4dE5ld2xpbmUgPSBpbnB1dC5pbmRleE9mKG5ld2xpbmUsIGN1cnNvcik7XG5cdFx0XHR2YXIgcXVvdGVDaGFyUmVnZXggPSBuZXcgUmVnRXhwKHF1b3RlQ2hhcitxdW90ZUNoYXIsICdnJyk7XG5cblx0XHRcdC8vIFBhcnNlciBsb29wXG5cdFx0XHRmb3IgKDs7KVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBGaWVsZCBoYXMgb3BlbmluZyBxdW90ZVxuXHRcdFx0XHRpZiAoaW5wdXRbY3Vyc29yXSA9PT0gcXVvdGVDaGFyKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Ly8gU3RhcnQgb3VyIHNlYXJjaCBmb3IgdGhlIGNsb3NpbmcgcXVvdGUgd2hlcmUgdGhlIGN1cnNvciBpc1xuXHRcdFx0XHRcdHZhciBxdW90ZVNlYXJjaCA9IGN1cnNvcjtcblxuXHRcdFx0XHRcdC8vIFNraXAgdGhlIG9wZW5pbmcgcXVvdGVcblx0XHRcdFx0XHRjdXJzb3IrKztcblxuXHRcdFx0XHRcdGZvciAoOzspXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Ly8gRmluZCBjbG9zaW5nIHF1b3RlXG5cdFx0XHRcdFx0XHR2YXIgcXVvdGVTZWFyY2ggPSBpbnB1dC5pbmRleE9mKHF1b3RlQ2hhciwgcXVvdGVTZWFyY2grMSk7XG5cblx0XHRcdFx0XHRcdC8vTm8gb3RoZXIgcXVvdGVzIGFyZSBmb3VuZCAtIG5vIG90aGVyIGRlbGltaXRlcnNcblx0XHRcdFx0XHRcdGlmIChxdW90ZVNlYXJjaCA9PT0gLTEpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGlmICghaWdub3JlTGFzdFJvdykge1xuXHRcdFx0XHRcdFx0XHRcdC8vIE5vIGNsb3NpbmcgcXVvdGUuLi4gd2hhdCBhIHBpdHlcblx0XHRcdFx0XHRcdFx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnUXVvdGVzJyxcblx0XHRcdFx0XHRcdFx0XHRcdGNvZGU6ICdNaXNzaW5nUXVvdGVzJyxcblx0XHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdRdW90ZWQgZmllbGQgdW50ZXJtaW5hdGVkJyxcblx0XHRcdFx0XHRcdFx0XHRcdHJvdzogZGF0YS5sZW5ndGgsXHQvLyByb3cgaGFzIHlldCB0byBiZSBpbnNlcnRlZFxuXHRcdFx0XHRcdFx0XHRcdFx0aW5kZXg6IGN1cnNvclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmaW5pc2goKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gQ2xvc2luZyBxdW90ZSBhdCBFT0Zcblx0XHRcdFx0XHRcdGlmIChxdW90ZVNlYXJjaCA9PT0gaW5wdXRMZW4tMSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dmFyIHZhbHVlID0gaW5wdXQuc3Vic3RyaW5nKGN1cnNvciwgcXVvdGVTZWFyY2gpLnJlcGxhY2UocXVvdGVDaGFyUmVnZXgsIHF1b3RlQ2hhcik7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmaW5pc2godmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGlzIHF1b3RlIGlzIGVzY2FwZWQsIGl0J3MgcGFydCBvZiB0aGUgZGF0YTsgc2tpcCBpdFxuXHRcdFx0XHRcdFx0aWYgKGlucHV0W3F1b3RlU2VhcmNoKzFdID09PSBxdW90ZUNoYXIpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHF1b3RlU2VhcmNoKys7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBDbG9zaW5nIHF1b3RlIGZvbGxvd2VkIGJ5IGRlbGltaXRlclxuXHRcdFx0XHRcdFx0aWYgKGlucHV0W3F1b3RlU2VhcmNoKzFdID09PSBkZWxpbSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0cm93LnB1c2goaW5wdXQuc3Vic3RyaW5nKGN1cnNvciwgcXVvdGVTZWFyY2gpLnJlcGxhY2UocXVvdGVDaGFyUmVnZXgsIHF1b3RlQ2hhcikpO1xuXHRcdFx0XHRcdFx0XHRjdXJzb3IgPSBxdW90ZVNlYXJjaCArIDEgKyBkZWxpbUxlbjtcblx0XHRcdFx0XHRcdFx0bmV4dERlbGltID0gaW5wdXQuaW5kZXhPZihkZWxpbSwgY3Vyc29yKTtcblx0XHRcdFx0XHRcdFx0bmV4dE5ld2xpbmUgPSBpbnB1dC5pbmRleE9mKG5ld2xpbmUsIGN1cnNvcik7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBDbG9zaW5nIHF1b3RlIGZvbGxvd2VkIGJ5IG5ld2xpbmVcblx0XHRcdFx0XHRcdGlmIChpbnB1dC5zdWJzdHIocXVvdGVTZWFyY2grMSwgbmV3bGluZUxlbikgPT09IG5ld2xpbmUpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHJvdy5wdXNoKGlucHV0LnN1YnN0cmluZyhjdXJzb3IsIHF1b3RlU2VhcmNoKS5yZXBsYWNlKHF1b3RlQ2hhclJlZ2V4LCBxdW90ZUNoYXIpKTtcblx0XHRcdFx0XHRcdFx0c2F2ZVJvdyhxdW90ZVNlYXJjaCArIDEgKyBuZXdsaW5lTGVuKTtcblx0XHRcdFx0XHRcdFx0bmV4dERlbGltID0gaW5wdXQuaW5kZXhPZihkZWxpbSwgY3Vyc29yKTtcdC8vIGJlY2F1c2Ugd2UgbWF5IGhhdmUgc2tpcHBlZCB0aGUgbmV4dERlbGltIGluIHRoZSBxdW90ZWQgZmllbGRcblxuXHRcdFx0XHRcdFx0XHRpZiAoc3RlcElzRnVuY3Rpb24pXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRkb1N0ZXAoKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoYWJvcnRlZClcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXR1cm5hYmxlKCk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAocHJldmlldyAmJiBkYXRhLmxlbmd0aCA+PSBwcmV2aWV3KVxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXR1cm5hYmxlKHRydWUpO1xuXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cblx0XHRcdFx0XHRcdC8vIENoZWNrcyBmb3IgdmFsaWQgY2xvc2luZyBxdW90ZXMgYXJlIGNvbXBsZXRlIChlc2NhcGVkIHF1b3RlcyBvciBxdW90ZSBmb2xsb3dlZCBieSBFT0YvZGVsaW1pdGVyL25ld2xpbmUpIC0tIGFzc3VtZSB0aGVzZSBxdW90ZXMgYXJlIHBhcnQgb2YgYW4gaW52YWxpZCB0ZXh0IHN0cmluZ1xuXHRcdFx0XHRcdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnUXVvdGVzJyxcblx0XHRcdFx0XHRcdFx0Y29kZTogJ0ludmFsaWRRdW90ZXMnLFxuXHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnVHJhaWxpbmcgcXVvdGUgb24gcXVvdGVkIGZpZWxkIGlzIG1hbGZvcm1lZCcsXG5cdFx0XHRcdFx0XHRcdHJvdzogZGF0YS5sZW5ndGgsXHQvLyByb3cgaGFzIHlldCB0byBiZSBpbnNlcnRlZFxuXHRcdFx0XHRcdFx0XHRpbmRleDogY3Vyc29yXG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0cXVvdGVTZWFyY2grKztcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDb21tZW50IGZvdW5kIGF0IHN0YXJ0IG9mIG5ldyBsaW5lXG5cdFx0XHRcdGlmIChjb21tZW50cyAmJiByb3cubGVuZ3RoID09PSAwICYmIGlucHV0LnN1YnN0cihjdXJzb3IsIGNvbW1lbnRzTGVuKSA9PT0gY29tbWVudHMpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAobmV4dE5ld2xpbmUgPT09IC0xKVx0Ly8gQ29tbWVudCBlbmRzIGF0IEVPRlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJldHVybmFibGUoKTtcblx0XHRcdFx0XHRjdXJzb3IgPSBuZXh0TmV3bGluZSArIG5ld2xpbmVMZW47XG5cdFx0XHRcdFx0bmV4dE5ld2xpbmUgPSBpbnB1dC5pbmRleE9mKG5ld2xpbmUsIGN1cnNvcik7XG5cdFx0XHRcdFx0bmV4dERlbGltID0gaW5wdXQuaW5kZXhPZihkZWxpbSwgY3Vyc29yKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE5leHQgZGVsaW1pdGVyIGNvbWVzIGJlZm9yZSBuZXh0IG5ld2xpbmUsIHNvIHdlJ3ZlIHJlYWNoZWQgZW5kIG9mIGZpZWxkXG5cdFx0XHRcdGlmIChuZXh0RGVsaW0gIT09IC0xICYmIChuZXh0RGVsaW0gPCBuZXh0TmV3bGluZSB8fCBuZXh0TmV3bGluZSA9PT0gLTEpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cm93LnB1c2goaW5wdXQuc3Vic3RyaW5nKGN1cnNvciwgbmV4dERlbGltKSk7XG5cdFx0XHRcdFx0Y3Vyc29yID0gbmV4dERlbGltICsgZGVsaW1MZW47XG5cdFx0XHRcdFx0bmV4dERlbGltID0gaW5wdXQuaW5kZXhPZihkZWxpbSwgY3Vyc29yKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEVuZCBvZiByb3dcblx0XHRcdFx0aWYgKG5leHROZXdsaW5lICE9PSAtMSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJvdy5wdXNoKGlucHV0LnN1YnN0cmluZyhjdXJzb3IsIG5leHROZXdsaW5lKSk7XG5cdFx0XHRcdFx0c2F2ZVJvdyhuZXh0TmV3bGluZSArIG5ld2xpbmVMZW4pO1xuXG5cdFx0XHRcdFx0aWYgKHN0ZXBJc0Z1bmN0aW9uKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRvU3RlcCgpO1xuXHRcdFx0XHRcdFx0aWYgKGFib3J0ZWQpXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXR1cm5hYmxlKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHByZXZpZXcgJiYgZGF0YS5sZW5ndGggPj0gcHJldmlldylcblx0XHRcdFx0XHRcdHJldHVybiByZXR1cm5hYmxlKHRydWUpO1xuXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXG5cdFx0XHRyZXR1cm4gZmluaXNoKCk7XG5cblxuXHRcdFx0ZnVuY3Rpb24gcHVzaFJvdyhyb3cpXG5cdFx0XHR7XG5cdFx0XHRcdGRhdGEucHVzaChyb3cpO1xuXHRcdFx0XHRsYXN0Q3Vyc29yID0gY3Vyc29yO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEFwcGVuZHMgdGhlIHJlbWFpbmluZyBpbnB1dCBmcm9tIGN1cnNvciB0byB0aGUgZW5kIGludG9cblx0XHRcdCAqIHJvdywgc2F2ZXMgdGhlIHJvdywgY2FsbHMgc3RlcCwgYW5kIHJldHVybnMgdGhlIHJlc3VsdHMuXG5cdFx0XHQgKi9cblx0XHRcdGZ1bmN0aW9uIGZpbmlzaCh2YWx1ZSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKGlnbm9yZUxhc3RSb3cpXG5cdFx0XHRcdFx0cmV0dXJuIHJldHVybmFibGUoKTtcblx0XHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpXG5cdFx0XHRcdFx0dmFsdWUgPSBpbnB1dC5zdWJzdHIoY3Vyc29yKTtcblx0XHRcdFx0cm93LnB1c2godmFsdWUpO1xuXHRcdFx0XHRjdXJzb3IgPSBpbnB1dExlbjtcdC8vIGltcG9ydGFudCBpbiBjYXNlIHBhcnNpbmcgaXMgcGF1c2VkXG5cdFx0XHRcdHB1c2hSb3cocm93KTtcblx0XHRcdFx0aWYgKHN0ZXBJc0Z1bmN0aW9uKVxuXHRcdFx0XHRcdGRvU3RlcCgpO1xuXHRcdFx0XHRyZXR1cm4gcmV0dXJuYWJsZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEFwcGVuZHMgdGhlIGN1cnJlbnQgcm93IHRvIHRoZSByZXN1bHRzLiBJdCBzZXRzIHRoZSBjdXJzb3Jcblx0XHRcdCAqIHRvIG5ld0N1cnNvciBhbmQgZmluZHMgdGhlIG5leHROZXdsaW5lLiBUaGUgY2FsbGVyIHNob3VsZFxuXHRcdFx0ICogdGFrZSBjYXJlIHRvIGV4ZWN1dGUgdXNlcidzIHN0ZXAgZnVuY3Rpb24gYW5kIGNoZWNrIGZvclxuXHRcdFx0ICogcHJldmlldyBhbmQgZW5kIHBhcnNpbmcgaWYgbmVjZXNzYXJ5LlxuXHRcdFx0ICovXG5cdFx0XHRmdW5jdGlvbiBzYXZlUm93KG5ld0N1cnNvcilcblx0XHRcdHtcblx0XHRcdFx0Y3Vyc29yID0gbmV3Q3Vyc29yO1xuXHRcdFx0XHRwdXNoUm93KHJvdyk7XG5cdFx0XHRcdHJvdyA9IFtdO1xuXHRcdFx0XHRuZXh0TmV3bGluZSA9IGlucHV0LmluZGV4T2YobmV3bGluZSwgY3Vyc29yKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHJlc3VsdHMsIGVycm9ycywgYW5kIG1ldGEuICovXG5cdFx0XHRmdW5jdGlvbiByZXR1cm5hYmxlKHN0b3BwZWQpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0XHRlcnJvcnM6IGVycm9ycyxcblx0XHRcdFx0XHRtZXRhOiB7XG5cdFx0XHRcdFx0XHRkZWxpbWl0ZXI6IGRlbGltLFxuXHRcdFx0XHRcdFx0bGluZWJyZWFrOiBuZXdsaW5lLFxuXHRcdFx0XHRcdFx0YWJvcnRlZDogYWJvcnRlZCxcblx0XHRcdFx0XHRcdHRydW5jYXRlZDogISFzdG9wcGVkLFxuXHRcdFx0XHRcdFx0Y3Vyc29yOiBsYXN0Q3Vyc29yICsgKGJhc2VJbmRleCB8fCAwKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0LyoqIEV4ZWN1dGVzIHRoZSB1c2VyJ3Mgc3RlcCBmdW5jdGlvbiBhbmQgcmVzZXRzIGRhdGEgJiBlcnJvcnMuICovXG5cdFx0XHRmdW5jdGlvbiBkb1N0ZXAoKVxuXHRcdFx0e1xuXHRcdFx0XHRzdGVwKHJldHVybmFibGUoKSk7XG5cdFx0XHRcdGRhdGEgPSBbXSwgZXJyb3JzID0gW107XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8qKiBTZXRzIHRoZSBhYm9ydCBmbGFnICovXG5cdFx0dGhpcy5hYm9ydCA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRhYm9ydGVkID0gdHJ1ZTtcblx0XHR9O1xuXG5cdFx0LyoqIEdldHMgdGhlIGN1cnNvciBwb3NpdGlvbiAqL1xuXHRcdHRoaXMuZ2V0Q2hhckluZGV4ID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdHJldHVybiBjdXJzb3I7XG5cdFx0fTtcblx0fVxuXG5cblx0Ly8gSWYgeW91IG5lZWQgdG8gbG9hZCBQYXBhIFBhcnNlIGFzeW5jaHJvbm91c2x5IGFuZCB5b3UgYWxzbyBuZWVkIHdvcmtlciB0aHJlYWRzLCBoYXJkLWNvZGVcblx0Ly8gdGhlIHNjcmlwdCBwYXRoIGhlcmUuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21ob2x0L1BhcGFQYXJzZS9pc3N1ZXMvODcjaXNzdWVjb21tZW50LTU3ODg1MzU4XG5cdGZ1bmN0aW9uIGdldFNjcmlwdFBhdGgoKVxuXHR7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG5cdFx0cmV0dXJuIHNjcmlwdHMubGVuZ3RoID8gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyYyA6ICcnO1xuXHR9XG5cblx0ZnVuY3Rpb24gbmV3V29ya2VyKClcblx0e1xuXHRcdGlmICghUGFwYS5XT1JLRVJTX1NVUFBPUlRFRClcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRpZiAoIUxPQURFRF9TWU5DICYmIFBhcGEuU0NSSVBUX1BBVEggPT09IG51bGwpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdCdTY3JpcHQgcGF0aCBjYW5ub3QgYmUgZGV0ZXJtaW5lZCBhdXRvbWF0aWNhbGx5IHdoZW4gUGFwYSBQYXJzZSBpcyBsb2FkZWQgYXN5bmNocm9ub3VzbHkuICcgK1xuXHRcdFx0XHQnWW91IG5lZWQgdG8gc2V0IFBhcGEuU0NSSVBUX1BBVEggbWFudWFsbHkuJ1xuXHRcdFx0KTtcblx0XHR2YXIgd29ya2VyVXJsID0gUGFwYS5TQ1JJUFRfUEFUSCB8fCBBVVRPX1NDUklQVF9QQVRIO1xuXHRcdC8vIEFwcGVuZCAncGFwYXdvcmtlcicgdG8gdGhlIHNlYXJjaCBzdHJpbmcgdG8gdGVsbCBwYXBhcGFyc2UgdGhhdCB0aGlzIGlzIG91ciB3b3JrZXIuXG5cdFx0d29ya2VyVXJsICs9ICh3b3JrZXJVcmwuaW5kZXhPZignPycpICE9PSAtMSA/ICcmJyA6ICc/JykgKyAncGFwYXdvcmtlcic7XG5cdFx0dmFyIHcgPSBuZXcgZ2xvYmFsLldvcmtlcih3b3JrZXJVcmwpO1xuXHRcdHcub25tZXNzYWdlID0gbWFpblRocmVhZFJlY2VpdmVkTWVzc2FnZTtcblx0XHR3LmlkID0gd29ya2VySWRDb3VudGVyKys7XG5cdFx0d29ya2Vyc1t3LmlkXSA9IHc7XG5cdFx0cmV0dXJuIHc7XG5cdH1cblxuXHQvKiogQ2FsbGJhY2sgd2hlbiBtYWluIHRocmVhZCByZWNlaXZlcyBhIG1lc3NhZ2UgKi9cblx0ZnVuY3Rpb24gbWFpblRocmVhZFJlY2VpdmVkTWVzc2FnZShlKVxuXHR7XG5cdFx0dmFyIG1zZyA9IGUuZGF0YTtcblx0XHR2YXIgd29ya2VyID0gd29ya2Vyc1ttc2cud29ya2VySWRdO1xuXHRcdHZhciBhYm9ydGVkID0gZmFsc2U7XG5cblx0XHRpZiAobXNnLmVycm9yKVxuXHRcdFx0d29ya2VyLnVzZXJFcnJvcihtc2cuZXJyb3IsIG1zZy5maWxlKTtcblx0XHRlbHNlIGlmIChtc2cucmVzdWx0cyAmJiBtc2cucmVzdWx0cy5kYXRhKVxuXHRcdHtcblx0XHRcdHZhciBhYm9ydCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRhYm9ydGVkID0gdHJ1ZTtcblx0XHRcdFx0Y29tcGxldGVXb3JrZXIobXNnLndvcmtlcklkLCB7IGRhdGE6IFtdLCBlcnJvcnM6IFtdLCBtZXRhOiB7IGFib3J0ZWQ6IHRydWUgfSB9KTtcblx0XHRcdH07XG5cblx0XHRcdHZhciBoYW5kbGUgPSB7XG5cdFx0XHRcdGFib3J0OiBhYm9ydCxcblx0XHRcdFx0cGF1c2U6IG5vdEltcGxlbWVudGVkLFxuXHRcdFx0XHRyZXN1bWU6IG5vdEltcGxlbWVudGVkXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoaXNGdW5jdGlvbih3b3JrZXIudXNlclN0ZXApKVxuXHRcdFx0e1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5yZXN1bHRzLmRhdGEubGVuZ3RoOyBpKyspXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR3b3JrZXIudXNlclN0ZXAoe1xuXHRcdFx0XHRcdFx0ZGF0YTogW21zZy5yZXN1bHRzLmRhdGFbaV1dLFxuXHRcdFx0XHRcdFx0ZXJyb3JzOiBtc2cucmVzdWx0cy5lcnJvcnMsXG5cdFx0XHRcdFx0XHRtZXRhOiBtc2cucmVzdWx0cy5tZXRhXG5cdFx0XHRcdFx0fSwgaGFuZGxlKTtcblx0XHRcdFx0XHRpZiAoYWJvcnRlZClcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlbGV0ZSBtc2cucmVzdWx0cztcdC8vIGZyZWUgbWVtb3J5IEFTQVBcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKGlzRnVuY3Rpb24od29ya2VyLnVzZXJDaHVuaykpXG5cdFx0XHR7XG5cdFx0XHRcdHdvcmtlci51c2VyQ2h1bmsobXNnLnJlc3VsdHMsIGhhbmRsZSwgbXNnLmZpbGUpO1xuXHRcdFx0XHRkZWxldGUgbXNnLnJlc3VsdHM7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG1zZy5maW5pc2hlZCAmJiAhYWJvcnRlZClcblx0XHRcdGNvbXBsZXRlV29ya2VyKG1zZy53b3JrZXJJZCwgbXNnLnJlc3VsdHMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY29tcGxldGVXb3JrZXIod29ya2VySWQsIHJlc3VsdHMpIHtcblx0XHR2YXIgd29ya2VyID0gd29ya2Vyc1t3b3JrZXJJZF07XG5cdFx0aWYgKGlzRnVuY3Rpb24od29ya2VyLnVzZXJDb21wbGV0ZSkpXG5cdFx0XHR3b3JrZXIudXNlckNvbXBsZXRlKHJlc3VsdHMpO1xuXHRcdHdvcmtlci50ZXJtaW5hdGUoKTtcblx0XHRkZWxldGUgd29ya2Vyc1t3b3JrZXJJZF07XG5cdH1cblxuXHRmdW5jdGlvbiBub3RJbXBsZW1lbnRlZCgpIHtcblx0XHR0aHJvdyAnTm90IGltcGxlbWVudGVkLic7XG5cdH1cblxuXHQvKiogQ2FsbGJhY2sgd2hlbiB3b3JrZXIgdGhyZWFkIHJlY2VpdmVzIGEgbWVzc2FnZSAqL1xuXHRmdW5jdGlvbiB3b3JrZXJUaHJlYWRSZWNlaXZlZE1lc3NhZ2UoZSlcblx0e1xuXHRcdHZhciBtc2cgPSBlLmRhdGE7XG5cblx0XHRpZiAodHlwZW9mIFBhcGEuV09SS0VSX0lEID09PSAndW5kZWZpbmVkJyAmJiBtc2cpXG5cdFx0XHRQYXBhLldPUktFUl9JRCA9IG1zZy53b3JrZXJJZDtcblxuXHRcdGlmICh0eXBlb2YgbXNnLmlucHV0ID09PSAnc3RyaW5nJylcblx0XHR7XG5cdFx0XHRnbG9iYWwucG9zdE1lc3NhZ2Uoe1xuXHRcdFx0XHR3b3JrZXJJZDogUGFwYS5XT1JLRVJfSUQsXG5cdFx0XHRcdHJlc3VsdHM6IFBhcGEucGFyc2UobXNnLmlucHV0LCBtc2cuY29uZmlnKSxcblx0XHRcdFx0ZmluaXNoZWQ6IHRydWVcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoZ2xvYmFsLkZpbGUgJiYgbXNnLmlucHV0IGluc3RhbmNlb2YgRmlsZSkgfHwgbXNnLmlucHV0IGluc3RhbmNlb2YgT2JqZWN0KVx0Ly8gdGhhbmsgeW91LCBTYWZhcmkgKHNlZSBpc3N1ZSAjMTA2KVxuXHRcdHtcblx0XHRcdHZhciByZXN1bHRzID0gUGFwYS5wYXJzZShtc2cuaW5wdXQsIG1zZy5jb25maWcpO1xuXHRcdFx0aWYgKHJlc3VsdHMpXG5cdFx0XHRcdGdsb2JhbC5wb3N0TWVzc2FnZSh7XG5cdFx0XHRcdFx0d29ya2VySWQ6IFBhcGEuV09SS0VSX0lELFxuXHRcdFx0XHRcdHJlc3VsdHM6IHJlc3VsdHMsXG5cdFx0XHRcdFx0ZmluaXNoZWQ6IHRydWVcblx0XHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqIE1ha2VzIGEgZGVlcCBjb3B5IG9mIGFuIGFycmF5IG9yIG9iamVjdCAobW9zdGx5KSAqL1xuXHRmdW5jdGlvbiBjb3B5KG9iailcblx0e1xuXHRcdGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jylcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0dmFyIGNweSA9IG9iaiBpbnN0YW5jZW9mIEFycmF5ID8gW10gOiB7fTtcblx0XHRmb3IgKHZhciBrZXkgaW4gb2JqKVxuXHRcdFx0Y3B5W2tleV0gPSBjb3B5KG9ialtrZXldKTtcblx0XHRyZXR1cm4gY3B5O1xuXHR9XG5cblx0ZnVuY3Rpb24gYmluZEZ1bmN0aW9uKGYsIHNlbGYpXG5cdHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7IGYuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfTtcblx0fVxuXG5cdGZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuYylcblx0e1xuXHRcdHJldHVybiB0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJztcblx0fVxuXG5cdHJldHVybiBQYXBhO1xufSkpO1xuIiwiaW1wb3J0IFBhcGEgZnJvbSAncGFwYXBhcnNlJztcbmltcG9ydCB7Y2hlY2tVUkxQYXR0ZXJufSBmcm9tICcuL2hlbHBlcnMuanMnO1xuaW1wb3J0IEN1c3RvbUV2ZW50IGZyb20gJy4uL2V2ZW50cy9ldmVudC5qcyc7XG5cbi8qKlxuICogQmFzaWNhbGx5IGFuIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHVuZGVyc3RhbmRpbmcgdGhlIFxuICogVHlwZSBvZiBkYXRhIChVUkwsIFN0cmluZyBldGMpIHBhc3NlZCBoZW5jZWQga2VwdCBvdXRzaWRlIHRoZSBjbGFzc1xuICogYnV0IGFjY2Vzc2libGUgZnJvbSB0aGlzIGNsYXNzIG9ubHkuIENhbiBiZSBsYXRlciBcbiAqIHNoaWZ0ZWQgdG8gdXRpbGl0eSBzaGFyZWQgYWNyb3NzIHByb2plY3QgaWYgbmVlZCBiZS5cbiAqIEBwYXJhbSB7Kn0gZGF0YSBcbiAqL1xuZnVuY3Rpb24gZGV0ZWN0RGF0YShkYXRhKSB7XG4gICAgbGV0IGRhdGFUeXBlID0gJyc7XG4gICAgLy9jaGVjayB3aGV0aGVyIHRoaXMgaXMgYSBVUkxcbiAgICBpZihjaGVja1VSTFBhdHRlcm4oZGF0YSkpIHtcbiAgICAgICAgZGF0YVR5cGUgPSAnVVJMJ1xuICAgIH0gZWxzZXtcbiAgICAgICAgZGF0YVR5cGUgPSAnU3RyaW5nJ1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhVHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ1NWUHJvY2Vzc29yIGV4dGVuZHMgQ3VzdG9tRXZlbnQge1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICAvL2dldCBldmVudCBwb3dlclxuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvL0luc3RhbmNlIHNwZWNpZmljIGRhdGEgY29uZmlnXG4gICAgICAgIHRoaXMuZGF0YV9jb25maWcgPSB7fTtcbiAgICAgICAgLy9pZiB0aGUgZGF0YSBpcyBub3QgZW1wdHkgc3RhcnQgcHJvY2Vzc2luZ1xuICAgICAgICBpZihkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFfY29uZmlnLnJhd0RhdGEgPSBkYXRhO1xuICAgICAgICAgICAgaWYoZGV0ZWN0RGF0YShkYXRhKSA9PT0gJ1VSTCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFfY29uZmlnLnJhd0RhdGFJc1VSTCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YV9jb25maWcucmF3RGF0YUlzVVJMID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGFyc2VDU1Z0b0pTT04oKTtcbiAgICAgICAgfVxuICAgICAgIC8vIGRlYnVnZ2VyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBsb2FkIGFuZCBwYXJzZSB0aGUgcGFzc2VkIENTViB1c2luZyB0aGUgXG4gICAgICogbGlicmFyeSBQYXBhcGFyc2UuIFxuICAgICAqL1xuICAgIHBhcnNlQ1NWdG9KU09OICgpIHtcbiAgICAgICAgbGV0IGNzdlBhcnNlciA9IHRoaXMsXG4gICAgICAgICAgICBkdF9jb25maWcgPSB0aGlzLmRhdGFfY29uZmlnLFxuICAgICAgICAgICAgZGF0YSA9IGR0X2NvbmZpZyAmJiBkdF9jb25maWcucmF3RGF0YSxcbiAgICAgICAgICAgIGlzVVJMID0gZHRfY29uZmlnICYmIGR0X2NvbmZpZy5yYXdEYXRhSXNVUkwsXG4gICAgICAgICAgICBwYXJzZWRKU09OO1xuICAgICAgICAgICAgXG4gICAgICAgIFBhcGEucGFyc2UoZGF0YSwge1xuICAgICAgICAgICAgZG93bmxvYWQ6IGlzVVJMLFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRKU09OID0gcmVzdWx0cztcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwYXJzZWRKU09OKTtcbiAgICAgICAgICAgICAgICBjc3ZQYXJzZXIuZW1pdCgnZGF0YVBhcnNlZCcsIHBhcnNlZEpTT04pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnIsIGZpbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVSUk9SOiBFcnJvciBpbiBsb2FkaW5nIHRoZSBmaWxlIDogXCIrIGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBcbn0iLCJpbXBvcnQgQ1NWUHJvY2Vzc29yIGZyb20gJy4vdXRpbGl0aWVzL0NTVlByb2Nlc3Nvci5qcyc7XG5pbXBvcnQgKiBhcyBzZW5zaV9ncmlkX2NvbmZpZyBmcm9tICcuL21vZGVsL2NvbmZpZy5qcyc7XG5pbXBvcnQgQ3VzdG9tRXZlbnQgZnJvbSAnLi9ldmVudHMvZXZlbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5zaUdyaWQge1xuXG4gICAgY29uc3RydWN0b3IgKHdpZHRoLCBoZWlnaHQsIGRhdGEpIHtcbiAgICAgICAgbGV0IGdjID0gc2Vuc2lfZ3JpZF9jb25maWcuZGVmYXVsdHMudGFibGVfY29uZmlnLFxuICAgICAgICAgICAgdGFibGVJbnN0YW5jZXMgPSBzZW5zaV9ncmlkX2NvbmZpZy5pbnN0YW5jZXMsXG4gICAgICAgICAgICBjc3Y7XG5cbiAgICAgICAgdGhpcy53aWR0aCA9IGdjLndpZHRoID0gd2lkdGggPyB3aWR0aCA6IGdjLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGdjLmhlaWdodCA9IGhlaWdodCA/IGhlaWdodCA6IGdjLmhlaWdodDtcbiAgICAgICAgLy9jcmVhdGUgYW4gaW5zdGFuY2UgbGV2ZWwgZXZlbnQgb2JqZWN0IGZvciBhbGxcbiAgICAgICAgLy9jdXN0b20gZXZlbnRzIGJvdW5kIHRvIHRoaXMgaW5zdG5hY2UncyBzY29wZVxuICAgICAgICB0aGlzLmdyaWRFdmVudCA9IG5ldyBDdXN0b21FdmVudCgpO1xuXG4gICAgICAgIC8vIGlmIGRhdGEgaXMgYXZhaWxhYmxlIGluaXRpYXRlIGRhdGEgbG9hZGluZ1xuICAgICAgICBpZihkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNzdiA9IG5ldyBDU1ZQcm9jZXNzb3IoZGF0YSk7XG4gICAgICAgICAgICAvL2xpc3RlbiBmb3IgdGhlIGRhdGEgcGFyc2luZyBjb21wbGV0ZSBldmVudFxuICAgICAgICAgICAgY3N2LmFkZEV2ZW50TGlzdGVuZXIoJ2RhdGFQYXJzZWQnLCBmdW5jdGlvbihqc29uKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVWRU5UIEZJUkVEIEFORCBMSVNURU5FRFwiKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGpzb24pO1xuICAgICAgICAgICAgICAgIGdjLmRhdGEgPSBqc29uLmRhdGE7XG4gICAgICAgICAgICAgICAgY3JlYXRlVGFibGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbi8vbG9hZENTVigpOyJdLCJzb3VyY2VSb290IjoiIn0=